sub copy_string(src: [int8], dest: [int8])
    loop
        var c: int8 := src[0];
        dest[0] := c;
        if c == 0 then
            break;
        end if;
        dest := dest + 1;
        src := src + 1;
    end loop;
end sub;

sub copy_memory(src: [int8], dest: [int8], length: uint16)
    while length > 0 loop
        length := length - 1;
        dest[0] := src[0];
        dest := dest + 1;
        src := src + 1;
    end loop;
end sub;

sub compare_strings(left: [int8], right: [int8]): (result: int8)
    loop
        var c1: int8 := left[0];
        var c2: int8 := right[0];
        result := c1 - c2;
        if result != 0 then
            return;
        end if;
        if (c1 == 0) and (c2 == 0) then
            return;
        end if;

        left := left + 1;
        right := right + 1;
    end loop;
end sub;

sub compare_memory(left: [int8], right: [int8], length: uint16): (result: int8)
    while length != 0 loop
        length := length - 1;
        result := left[0] - right[0];
        if result != 0 then
            return;
        end if;

        left := left + 1;
        right := right + 1;
    end loop;
    result := 0;
end sub;

sub zero_memory(ptr: [int8], length: uint16)
    while length != 0 loop
        length := length - 1;
        ptr[0] := 0;
        ptr := ptr + 1;
    end loop;
end sub;

sub string_length(src: [int8]): (length: int16)
    var p: [int8] := src;
    while p[0] != 0 loop
        p := p + 1;
    end loop;
    length := p - src;
end sub;
