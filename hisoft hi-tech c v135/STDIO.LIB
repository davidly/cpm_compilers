
/*****************************/
/*         Hisoft C          */
/* Standard Function Library */
/*       version 1.3         */
/* Copyright (C) 1985 Hisoft */
/* Last changed  31 Oct 1985 */
/*****************************/

#list-

/* Some arithmetic functions */

/*
  min and max are in "stdio.h"
  because they are variadic
*/

int abs(n)
{
  return  n<0  ?  -n  :  n  ;
}


int sign(n)
{
  return  n  ?
    ( n<0 ? -1 : 1 ) : 0 ;
}



/*  An illustration of how to grub around in the store */


typedef  char * __char_ptr;


int peek(address)
{
  return  * cast(__char_ptr) address;
}


void poke(address, value)
{
  * cast(__char_ptr) address = value;
}


/*  Input and Output  */


int out(data, port)
{
  reg_bc = port;  reg_hl = data;
  inline(
    0x4BED, &reg_bc, /* ld bc,(reg_bc) */
    0x2A,   &reg_hl, /* ld hl,(reg_hl) */
    0x69ED);         /* out (c),l      */
}


int inp(port)
{
  inline(
    0xE1DD,     /* pop  ix    */
    0xE1,       /* pop  hl    */
    0xC1,       /* pop  bc    */
    0xE5,       /* push hl    */
    0x68ED,     /* in   l,(c) */
    0x26,   0,  /* ld   h,0   */
    0xC9);      /* ret        */
}



/*  Format conversion routine  -  ASCII to binary integer  */

int atoi(s)
  char *s;
{
  static int c, value, sign;

  while (isspace(*s)) ++s;
  value = 0;
  sign  = 1;
  if      (*s == '-') { ++s; sign = -1; }
  else if (*s == '+')   ++s;
  while (isdigit(c = *s++)) value = 10 * value + c - '0';
  return  sign * value;
}




/*  Sorting function - a Shell sort  */

void qsort(list, num_items, size, cmp_func)
  char *list;
  int   num_items, size;
  int (*cmp_func)();
{
  static unsigned gap, byte_gap, i;
  static char *p;

  for (gap = num_items >> 1;  gap > 0;  gap >>= 1)
    {
      byte_gap = gap * size;
      for (i = gap;  i < num_items;  ++i)
        for (p = list + i * size - byte_gap;  p >= list;  p -= byte_gap)
          {
            if ((*cmp_func)(p, p + byte_gap) <= 0) break;
            swap(p, p + byte_gap, size);
          }
    }
}




/*  String Handling Functions  */


char *strcat(base, add)
  char *base, *add;
{
  static char *dest;

  dest = base;
  while (*dest) ++dest;
  while (*dest++ = *add++);
  return  base;
}


char *strncat(s1, s2, n)
  char *s1, *s2;
{
  static char *s;

  s = s1;
  while (*s) ++s;
  while (n--  &&  *s2) *s++ = *s2++;
  *s = NULL;
  return s1;
}


int strcmp(s, t)
  char *s, *t;
{
  while (*s == *t)
    {
      if (! *s)  return 0;
      ++s; ++t;
    }
  return *s - *t;
}


int strncmp(s1, s2, n)
  char *s1, *s2;
{
  if (!n) return 0;
  while (*s1 == *s2)
    {
      if ( ! *s1) return 0;
      if ( ! --n) break;
      ++s1;  ++s2;
    }
  return *s1 - *s2;
}



char *strcpy(dest, source)
  char *dest, *source;
{
  static char *result;

  result = dest;
  while (*result++ = *source++) ;
  return dest;
}


char *strncpy(s1, s2, n)
  char *s1, *s2;
{
  static char *s, c;

  s = s1;
  c = *s2;
  while (n)
    {
      *s++ = ( c  ?  ( c = *s2++ )  :  0 ) ;
      --n;
    }
  return s1;
}



unsigned strlen(s)
  char *s;
{
  static char *p;

  p = s;
  do ; while (*p++);
  return p-s-1;
}



char *strpbrk(s1, s2)
  char *s1, *s2;
{
  while (*s1)
    {
      if (strchr(s2, *s1)) return s1;
      ++s1;
    }
  return NULL;
}


int strspn(s1, s2)
  char *s1, *s2;
{
  char *s;

  s = s1;
  while (*s)
    {
      if ( ! strchr(s2, *s)) break;
      ++s;
    }
  return s - s1;
}


int strcspn(s1, s2)
  char *s1, *s2;
{
  char *s;

  s = s1;
  while (*s)
    {
      if (strchr(s2, *s)) break;
      ++s;
    }
  return s - s1;
}



char *strchr(s, c)
  char *s, c;
{
  do
    {
      if (*s == c) return s;
      if ( ! *s)   return NULL;
      ++s;
    }
  while (TRUE);
}


char *strrchr(s, c)
  char *s, c;
{
  static char *t;

  t = s;
  s = NULL;
  do    if (*t == c) s = t;
  while (*t++);
  return s;
}

 


/*  Character Test and Manipulate Functions  */

/*  NB - the common ones are built-in for efficiency  */

int ispunct(c)
  char c;
{
  return  isprint(c) & ! isalnum(c);
}


int isalnum(c)
  char c;
{
  return  isalpha(c) | isdigit(c) ;
}


int isxdigit(c)
  char c;
{
  c = toupper(c);
  return  isdigit(c) | (c >= 'A'  &  c <= 'F');
}


int isascii(c)
  char c;
{
  return  c < 0x80 ;
}


int iscntrl(c)
  char c;
{
  return  c < ' ' | c == '\177' ;
}


int isprint(c)
  char c;
{
  return  c >= ' '  &  c < '\177' ;
}


int isgraph(c)
  char c;
{
  return  c > ' '  &  c < '\177' ;
}


int toascii(c)
  char c;
{
  return  c & 0x7F;
}



/******      FILE SYSTEM      ******/


char *fgets(s, n, fp)
  char *s;
  int   n;
  FILE *fp;
{
  static int c;
  static char *cs;

  cs = s;
  while (--n > 0  &&  (c = getc(fp)) != EOF)
    if ((*cs++ = c) == '\n') break;
  *cs = '\0';
  return ((c == EOF  &&  cs == s) ? NULL : s);
}



char *gets(s)
  char *s;
{
  static int   c;
  static char *cs;

  cs = s;
  while ((c = getchar())
    !=EOF  &&  c!='\n')
      *cs++ = c;
  *cs = 0;
  return
   ((c==-1 && cs==s) ?
    NULL : s );
}



void fputs(s, fp)
  char *s;
  FILE *fp;
{
  static int c;

  while (c = *s++) putc(c, fp);
}



void puts(s)
  char *s;
{
 static int c;

 while(c = *s++)putchar(c);
 putchar('\n');
}



int fread(buffer, item_size, num_items, stream)
  char *buffer;
  unsigned item_size, num_items;
  FILE *stream;
{
  FAST unsigned result;

  result = read(stream, buffer, item_size * num_items);
  return  (result == ERROR)  ?  NULL  :  result/item_size;
}



int fwrite(buffer, item_size, num_items, stream)
  char *buffer;
  unsigned item_size, num_items;
  FILE *stream;
{
  FAST unsigned result;

  result = write(stream, buffer, item_size * num_items);
  return  (result == ERROR)  ?  NULL  :  result/item_size;
}





int getw(file_pointer)
  FILE *file_pointer;
{
  FAST int c;

  if ((c = getc(file_pointer)) == EOF) return EOF;
  return c + (getc(file_pointer) << 8);
}


int putw(word, file_pointer)
  unsigned word;
  FILE *file_pointer;
{
  putc(word & 0xFF, file_pointer);
  return putc(word >> 8, file_pointer);
}


/*  Storage Allocation and Freeing (Heap Management)  */



char *calloc(n, size)
  unsigned   n, size;
{
  FAST char *ptr;
  FAST unsigned length;

  ptr = malloc(length = n * size);
  if ( ! ptr) return NULL;
  *ptr = 0;			/* now zero fill the store */
  blt(ptr+1, ptr, length-1);
  return ptr;
}


char *malloc(num_bytes)
{
  static HEADER  *p, *q;
  static unsigned  nbytes;
  char *sbrk();

  if ( ! num_bytes) return NULL;
  nbytes = (num_bytes + (sizeof(HEADER) - 1)) / sizeof(HEADER) + 1;
  if ((q = _allocp) == NULL)  /* no free list */
    {
      _base._ptr  = _allocp = q = &_base;
      _base._size = 0;
    }
  p = q->_ptr;
  while (TRUE)
    {
      if (p->_size >= nbytes)  /* big enough */
        {
          if (p->_size == nbytes)  q->_ptr = p->_ptr;  /* just right size */
          else
            {                          /* split block and allocate tail */
              p->_size -= nbytes;
              p        += p->_size;
              p->_size  = nbytes;
            }
          _allocp = q;
          return cast(__char_ptr) (p+1);
        }
      if (p == _allocp)  /* wrapped around free list */
        {
          if ((p = cast(HEADER_PTR) sbrk(nbytes * sizeof(HEADER))) == ERROR)
            return NULL;
          p->_size = nbytes;
          free(p+1);
          p = _allocp;
        }
      q = p;
      p = p->_ptr;
    }  /* end while TRUE */
}


void cfree(block)
{
  free(block);
}


void free(block)
  char *block;
{
  static HEADER *p, *q;

  p = cast(HEADER_PTR) block - 1;
  for (q = _allocp; !(p > q  &&  p < q->_ptr); q = q->_ptr)
    if (q >= q->_ptr  &&  (p > q  ||  p < q->_ptr))  break;

  if (p + p->_size  ==  q->_ptr)
    {
      p->_size += q->_ptr->_size;
      p->_ptr   = q->_ptr->_ptr;
    }
  else  p->_ptr = q->_ptr;

  if (q + q->_size  ==  p)
    {
      q->_size += p->_size;
      q->_ptr   = p->_ptr;
    }
  else  q->_ptr = p;

  _allocp = q;
}

/*
#define HEAPSIZE 1000

char *sbrk(n)
  unsigned n;
{
  static char *p,
    heap[HEAPSIZE],
    *heap_ptr=heap;

  if (heap_ptr+n > heap+HEAPSIZE) return ERROR;
  p=heap_ptr;
  heap_ptr += n;
  return p;
}
*/

#define LD_SP_into 0x73ED

char *sbrk(n)
  unsigned n;
{
  static unsigned result;

  inline(LD_SP_into, &result);
  if (result + _stklim < n)
    {
      fprintf(stderr,"\nheap full\n");
      return ERROR;
    }
  result   = -(_stklim + _SAFETY);
  _stklim -= n;
  return result;
}


/*  return to system - CP/M specific versions  */

exit(n)
{
  inline(CALL, 0x11E);
  _exit(n);
}


_exit(n)
{
  if (n)  printf("\nERROR EXIT %d\n", n);
  inline(0xC7);
}


/*  Pseudo-Random Number Generator  */
/*
    Adapted from "Learning to Program in C" by Thomas Plum.
*/


char  _rnum[4];


void srand(n)
{
  long_init(_rnum, 0,n);
}


int rand()
{
  static char k[4];

  long_init(k,  0x41c6,0x4e6d);
  long_multiply(_rnum, _rnum, k);
  long_init(k,       0,0x3039);
  long_add(_rnum, _rnum, k);
  return  ((_rnum[3] << 8)  +  _rnum[2]) & 0x7FFF;
}




/*  Some Functions for 32 bit integer arithmetic  */

void long_multiply(c, a, b)
  char *a, *b, *c;
{
  static char x[4], product[4];
  static int i, j;

  long_set(product, 0,0);
  for (i = 0; i < 4; ++i)
    for (j = i; j >= 0; --j)
      {
        long_set(x, a[i-j] * b[j], i);
        long_add(product, product, x);
      }
  long_copy(c, product);
}



void long_add(c, a, b)
  char *a, *b, *c;
{
  static int u, i;

  u = 0;
  for (i = 4; i; --i)
    {
      u   +=  *a++  +  *b++;
      *c++ =  u & 0xff;
      u  >>=  8;
    }
}


void long_sub(c, a, b)  /* c = a - b  */
  char *a, *b, *c;
{
  static int u, i;

  u = 0;
  for (i = 4; i; --i)
    {
      u   +=  *a++  -  *b++;
      *c++ =  u & 0xff;
      u  >>=  8;
    }
}



void long_init(a, n1, n0)
  char *a;
  unsigned n1,n0;
{
  a[0] = n0 & 0xff;
  a[1] = n0 >> 8;
  a[2] = n1 & 0xff;
  a[3] = n1 >> 8;
}



void long_set(a, n, d)
  char *a;
  unsigned n, d;
{
  static int i;

  for (i=0; i<4; ++i) a[i] = 0;
  a[d] = n & 0xff;
  if (d < 3) a[d+1] = n >> 8;
}



void long_copy(c, a)
  char *a, *c;
{
  blt(c, a, 4);
}


#list+

/*****************************/
/*         Hisoft C          */
/* Standard Function Library */
/*           End             */
/*****************************/


  Hisoft C          */
/* Standard Function L