\ information                                                                                                                   8080/85/Z80 assembler with local labels                         Based on J. Cassady 8080 forth assembler                                                                                        Uses TDL extended INTEL mnemonicsload block                                                    forth definitions  hex                                          sys @  system  warning @  warning off                                                                                           marker -ASM                                                                                                                     cr ." loading Z80 Assembler "  2 #screens 1- thru                                                                               forth definitions  decimal  warning !  sys !                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \ vocabularies                                                  vocabulary ASSEMBLER immediate  assembler definitions           vocabulary HIDDEN immediate     hidden definitions              chain assembler                                                                                                                 2variable avoc                                                                                                                  : rel ( a1 a2 -- offs )                                           1+ - dup 80 -80 within abort" branch range" ;                                                                                 defer !lb  ' noop is !lb                                        defer ?lb  ' noop is ?lb                                                                                                                                                                                                                                                                                                        \ modes                                                         variable xm  ( ix/iy mode )                                     variable xd  ( ix/iy displacement )                                                                                             : x, ( -- )  xm @  ?dup  if >< c, then ;                        : ?d ( -- )  xm @  2 and if xd @ c, then  xm off ;                                                                              : *8 ( a b -- c )  swap 0FF and  8 * + ;                        : *8,  *8 cm1  constant does> c@ c, ;                                    : m2  constant does> x, c@ + c, ?d ;                            : m3  constant does> x, c@ *8, ?d ;                             : m4  constant does> c@ c, c, ;                                 : m5  constant does> c@ c, , ;                                                                                                  assembler definitions  hidden                                                                                                   : MOV  x, 40 *8 + c, ?d ;                                       : MVI  x, 6 *8, ?d c, ;                                         : LXI  x, 1 *8, , ;                                                                                                                                                                                                                                                                                                             \ 8080 mnemonics                                                000 m1 NOP   007 m1 RLC   00F m1 RRC   017 m1 RAL   01F m1 RAR  027 m1 DAA   02F m1 CMA   037 m1 STC   03F m1 CMC   076 m1 HLT  0C0 m1 RNZ   0C8 m1 RZ    0C9 m1 RET   0D0 m1 RNC   0D8 m1 RC   0E0 m1 RPO   0E3 m1 XTHL  0E8 m1 RPE   0E9 m1 PCHL  0EB m1 XCHG 0F0 m1 RP    0F3 m1 DI    0F8 m1 RM    0F9 m1 SPHL  0FB m1 EI                                                                   080 m2 ADD   088 m2 ADC   090 m2 SUB   098 m2 SBB   0A0 m2 ANA  0A8 m2 XRA   0B0 m2 ORA   0B8 m2 CMP                                                                                            002 m3 STAX  003 m3 INX   004 m3 INR   005 m3 DCR   009 m3 DAD  00A m3 LDAX  00B m3 DCX   0C1 m3 POP   0C5 m3 PUSH  0C7 m3 RST                                                                  0C6 m4 ADI   0CE m4 ACI   0D3 m4 OUT   0D6 m4 SUI   0DB m4 IN   0DE m4 SBI   0E6 m4 ANI   0EE m4 XRI   0F6 m4 ORI   0FE m4 CPI                                                                  \ 8080 mnemonics                                                022 m5 SHLD  02A m5 LHLD  032 m5 STA   03A m5 LDA   0C2 m5 JNZ  0C3 m5 JMP   0C4 m5 CNZ   0CA m5 JZ    0CC m5 CZ    0CD m5 CALL 0D2 m5 JNC   0D4 m5 CNC   0DA m5 JC    0DC m5 CC    0E2 m5 JPO  0E4 m5 CPO   0EA m5 JPE   0EC m5 CPE   0F2 m5 JP    0F4 m5 CP   0FA m5 JM    0FC mregisters                                                     aka 0 B         aka 1 C         aka 2 D         aka 3 E    4 constant H    5 constant L    6 constant M         aka m PSW       aka m SP   7 constantm1 RIM   030 m1 SIM                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ." Z80 "                                                       hidden definitions                                              : m6  constant does> c@ c, here rel c, ;                        : m7  constant does> 0ED c, c@ c, ;                             : m8  constant does> 0ED c, c@ c, , ;                           : m9  constant does> 0CB c, ?d c@ + c, ;                        : ma  constant does> 0CB c, ?d c@ *8 + c, ;                     : mb  create , does> @ , ;                                      : mc  create , does> @ , , ;                                    : md  create , does> count c, c@ *8, ;                                                                                          assembler definitions  hidden                                                                                                                                                                                                                                                                                                   \ Z80 mnemonics                                                 008 m1 EXAF  0D9 m1 EXX                                                                                                         010 m6 DJNZ  018 m6 JMPR  020 m6 JRNZ  028 m6 JRZ   030 m6 JRNC 038 m6 JRC                                                                                                                      044 m7 NEG   045 m7 RETN  046 m7 IM0   047 m7 STAI  04D m7 RETI 04F m7 STAR  056 m7 IM1   057 m7 LDAI  05E m7 IM2   05F m7 LDAR 067 m7 RRD   06F m7 RLD   0A0 m7 LDI   0A1 m7 CCI   0A2 m7 INI  0A3 m7 OUTI  0A8 m7 LDD   0A9 m7 CCD   0AA m7 IND   0AB m7 OUTD 0B0 m7 LDIR  0B1 m7 CCIR  0B2 m7 INIR  0B3 m7 OUTIR 0B8 m7 LDDR 0B9 m7 CCDR  0BA m7 INDR  0BB m7 OUTDR                                                                                          043 m8 SBCD  04B m8 LBCD  053 m8 SDED  05B m8 LDED  073 m8 SSPD 07B m8 LSPD                                                                                                                     \ Z80 mnemonics                                                 000 m9 RLCR  008 m9 RRCR  010 m9 RALR  018 m9 RARR  020 m9 SLAR 028 m9 SRAR  038 m9 SRLR                                                                                                        040 ma BIT   080 ma RES   0C0 ma SET                                                                                            0E3DD mb XTIX  0E9DD mb PCIX  0F9DD mb SPIX  0E3FD mb XTIY      0E9FD mb PCIY  0F9FD mb SPIY                                                                                                    022DD mc SIXD  022FD mc SIYD  02ADD mc LIXD  02AFD mc LIYD                                                                      009DD md DADX  009FD md DADY  040ED md INP   041ED md OUTP      042ED md DSBC  04AED md DADC                                                                                                                                                                                                                                    \ Z80 registers                                                 : X ( -- X )  0DD04 dup xm ! ;                                  : Y ( -- Y )  0FD04 dup xm ! ;                                                                                                  : (X) ( n -- x )  xd !  0DD06 dup xm ! ;                        : (Y) ( n -- y )  xd !  0FD06 dup xm ! ;                                                                                        \\ Z80 undoc                                                    : IXH ( -- H )  x drop h ;                                      : IXL ( -- L )  x drop l ;                                      : IYH ( -- H )  y drop h ;                                      : IYL ( -- L )  y drop l ;                                                                                                                                                                                                                                                                                                      \ interface                                                     \ kernel addresses                                              'next  1-      constant HPUSH                                   'next  2-      constant DPUSH                                   'next  4 -     constant RPP     \ return stack pointer          ' :    1+ @    constant DOCOL   \ enter colon routine           ' exit 3 +     constant EXIT1   \ exit colon routine            ' again 1+ @   constant BRAN    \ address of BRANCH             ' -   3 + @    constant DSUB    \ subtract HL DE                ' u<  3 + @    constant CMPU    \ unsigned compare HL DE        ' max 3 + @    constant CMPS    \ signed compare HL DE          ' um* 3 + @    constant MULX    \ unsigned double multiply      ' um/mod 7 + @ constant DIVX    \ unsigned double divide        ' upcase 3 + @ constant UPC     \ uppercase A                   ' upcase 6 + @ constant APUSH   \ push A, jump NEXT                                                                             \ interface                                                     \ macros                                                        : NEXT   'next jmp ;                \ enter NEXT                : 1PUSH  hpush jmp ;                \ enter NEXT pushing HL     : 2PUSH  dpush jmp ;                \ enter NEXT pushing DE HL  : U# ( user -- offs )  up @ - ;     \ USER offset number        : [U]  up lhld  u# d lxi  d dad ;   \ USER adrinterface                                                     \ reset/check labels and stack point                            : READY ( -- sp )  csp @  !lb  !csp ;                           : CHECK ( sp -- )  ?csp  ?lb  csp ! ;                                                                                           : ASM]  avoc @ context ! ;                                                                                                      : END-CODE ( -- )  ?exec  check  asm]  smudge ;                                                                                 \ end macro definition                                          : ENDM ( sys -- )                                                 postpone ;  avoc 2@ context 2!  sys ! ; immediate                                                                                                                                                                                                                                                                             \ interface                                                     \ enter high-level forth, saving BC                             : C: ( -- )  docol call  asm]  ] ;                                                                                              forth definitions  assembler hidden                                                                                             : [ASM ( -- )                                                     context @ avoc !  postpone assembler  xm off                    postpone [  ; immediate                                                                                                       : LABEL ( -- )                                                    ?exec  create  smudge  postpone [asm  ready ; immediate                                                                       : CODE ( -- )  postpone label  3 recover ; immediate                                                                                                                                            \ interface                                                     : ;CODE ( -- )                                                    postpone (;code)  postpone [asm  ready ; immediate                                                                            \ begin macro definition                                        : MACRO ( -- sys )                                                sys @  context 2@ avoc 2!  postpone assembler  definitions      system  : ;                                                                                                                   \ exit high-level forth, restoring BC                           : ;C ( -- )  exit1 compile,  postpone [asm ; immediate                                                                                                                                                                                                                                                                                                                                          \ labels                                                        hidden definitions  forth                                       #20 constant #l  \ max labels                                   #25 constant #f  \ max forward references                                                                                       create &l  #l    cells allot                                    create &f  #f 2* cells allot                                                                                                    : >l ( n -- a )     cells &l + ;                                : >f ( n -- a )  2* cells &f + ;                                                                                                \ reset labels                                                  :noname ( -- )                                                    &l [ #l cells ] literal erase                                   &f [ #f 2* cells ] literal -1 fill ;  is !lb  !lb                                                                             \ labels                                                        \ resolve all forward references                                :noname ( -- )                                                    #f 0 do                                                           i >f 2@  -1 of drop break                                       >l @  dup 0= abort" no label"                                   ( target label )  over 1- c@ ( opc )                            dup 0C7 and 0=  swap 30 and  and  \ rel jmp ?                   if over rel  swap c!  else  swap !  then                      loop ;  is ?lb                                                                                                                                                                                                                                                                                                                                                                                                                                                \ labels                                                        \ check label number                                            : ?l ( n -- n' )                                                  1-  dup #l 0 within abort" bad label" ;                                                                                       \ add to forward ref table                                      : +f ( n a -- a )                                                 here 1+ ( skip opcode) rot ( a loc n)                           [ #f 1- ] literal >f @ invert abort" too many refs"             &f  dup 1 >f [ #f 1- 2* cells ] literal move  2! ;                                                                                                                                                                                                                                                                                                                                                                                                            \ labels                                                        assembler definitions  hidden                                                                                                   \ declare label                                                 : $: ( n -- )                                                     ?l >l  dup @ abort" dup label"  here swap ! ;                                                                                 \ get label address                                             : $ ( n -- a )                                                    ?l  dup >l @  ( n adr) ?dup if  nip  end  here +f ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           