\ Simple counted string packageoad screen                                                   forth definitions decimal application                                                                                           cr ." loading Strings "  2 #screens 1- thru                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \\ Library functions                                            C"    ( "ccc" )            parse a counted string (state-smart) $VAR  ( len )              create string variable (255 max)     $CON  ( adr len )          create string constant (255 max)     APPEND ( adr len $ -- )    append adr/len str to counted string $! $+ ( $1 $2 -- )         store/append counted strings $1 to $2$REM  ( $ ofs -- a u )     remainder of counted string at offset$LEFT ( $ len -- a u )     leftmost chars of counted string     $RIGHT ( $ len -- a u )    rightmost chars of counted string    $MID  ( $ ofs len -- a u ) middle chars of counted string       $.    ( $ -- )             display counted string               $LEN  ( $ -- len )         length of counted string             $UPPER ( $ -- )            cvt counted string to upper in place $VAL  ( $ -- d|ud -1 | 0 ) cvt counted string to double number  $COMP ( $1 $2 -- -1|0|1 )  compare counted strings              $FIND ( $1 $2 -- a u -1 | $1 0 ) find counted string $2 in $1   \\ Kernel functions                                             COUNT ( $ -- a u )         adr/len of counted string            PLACE ( a u $ -- )         store adr/len to counted string      PACK  ( a u $ -- $ )       as for PLACE leave counted stringapplication                                                     :noname  r> dup count + >r ;                                    system  checking off                                                                                                            \ Parse counted string (state-smart)                            : C" ( "ccc" -- | -- $ )                                          state @ if  compile [ swap compile, ] ,"  end                   postpone s" dp @ pack ; immediate                             checking on                                                                                                                     \ Counted string variable/constant (255 chars max)              : $VAR ( len -- | -- $ )  create 0 c, allot ;                   : $CON ( adr len -- | -- $ )  create s, ;                       application                                                                                                                     \ APPEND $! $+ $REM $LEFT $RIGHT $MID $.                        \ Append string adr/len to counted string                       : APPEND ( adr len $ -- )  count +string swap 1- c! ;                                                                           \ Store/append counted strings $1 to $2                         : $! ( $1 $2 -- )  >r count r> place ;                          : $+ ( $1 $2 -- )  >r count r> append ;                                                                                         \ Substring                                                     : $REM ( $ ofs -- a u )  >r count r> over umin /string ;        : $LEFT ( $ len -- a u )  >r count r> umin ;                    : $RIGHT ( $ len -- a u )  over c@ umin >r count + r@ - r> ;    : $MID ( $ ofs len -- a u )  >r $rem r> umin ;                                                                                  \ Display counted string                                        : $. ( $ -- )  count type ;                                     \ $LEN $UPPER $VAL $COMP $FIND                                  \ Length of counted string                                      aka c@ $LEN ( $ -- len )                                                                                                        \ Convert counted string to uppercase in place                  : $UPPER ( $ -- )  count upper ;                                                                                                \ Convert counted string to number                              : $VAL ( $ -- d|ud -1 | 0 )  count number? ;                                                                                    \ Compare counted strings; CAPS prefix allowed                  : $COMP ( $1 $2 -- -1|0|1 )  swap count rot count compare ;                                                                     \ Find counted string $2 in string $1; CAPS prefix allowed      : $FIND ( $1 $2 -- a u -1 | $1 0 )                                >r count r> count search dup if end  2drop 1- 0 ;             