;
;  DISK.MAC - File and Block Functions
;
;  SETDMA  >DRV  >USR  MAX-PATH  PATH  -PATH  /ext  +EXT  -EXT
;  SETFCB  GETUSR  SETUSR  RSTUSR  REC@  REC!  >FNAME  fh  /fh
;  use  uid  fcb  rwp@  rwp!  #fcb  getfh  setfh  >IOR
;  FILE-POSITION  REPOSITION-FILE  xf5  FLUSH-FILE  FILE-SIZE
;  FILE-FCB  CLOSE-FILE  R/O  W/O  R/W  BIN  open1  open2  open3
;  OPEN-FILE  CREATE-FILE  >FCB  DELETE-FILE  RENAME-FILE  offs
;  setsiz  ranrw  rdini  fread  wrini  fwrite  READ-FILE  WRITE-FILE
;  WRITE-LINE  READ-LINE  fdt  sfp  SWAP-FILE  FDB  fd  fid  blks
;  scr#  fnb  buf  blk#  SCREEN?  LOADFILE  ?open  #SCREENS
;  EMPTY-BUFFERS  UPDATE  blkerr  blk-rw  ?blk  SAVE-BUFFERS
;  FLUSH  BUFFER  BLOCK  -->  (thru)  THRU  LOAD  FILEBLOCKS
;  CLOSE  CLOSE-ALL  LASTFILE  .lastfile  ?create  init-scr  OPEN
;  (open)  GETFILENAME  USING  LOADED  FLOAD  SAVE  TURNKEY
;  TURNKEY-SYSTEM
;

;	SETDMA  ( a -- )		26 bdos drop

	hdr	1,'SETDMA'
setdma:	pop	de
	ld	a,26
	call	bdoss
	nextt

;	>DRV  ( u1 -- u2 )	?dup if 1- end 0 25 bdos

	hdr	1,'>DRV'
tdrv:	pop	de
	ld	a,e
	dec	a
	call	m,gdrv
	jp	apush

;	>USR  ( u1 -- u2 )	dup 255 = if getusr nip then

	hdr	1,'>USR'
tusr:	pop	hl
	ld	a,l
	cp	255
	call	z,gusr
	jp	apush

;	MAX-PATH  ( -- u )

	hdr	1,'MAX-PATH'
maxp:	call	docco
	db	pfsiz-1

;	PATH  ( u1 -- c-addr u2 ior )
;				getusr 0 <# [char] : hold #s rot >drv
;				[char] A + hold #> 0

	hdr	1,'PATH'	; uses numeric buffer
path:	call	docol
	dw	getusr
	dw	zero,bdigs
	dw	clit
	db	':'
	dw	hold
	dw	digs
	dw	rot,tdrv
	dw	clit
	db	'A'
	dw	plus
	dw	hold,edigs
	dw	zero
	dw	exit

;	-PATH  ( c-addr1 u1 -- c-addr2 u2 )
;				2dup [char] : scan dup if 1 /string 2swap
;				then 2drop

	hdr	1,'-PATH'
dpath:	call	docol
	dw	tdup
	dw	clit
	db	':'
	dw	scan,dupp
	dw	zbran,dpath1
	dw	one,sstr
	dw	tswap
dpath1:	dw	tdrop
	dw	exit

;	/ext  ( c-addr1 u1 -- u2 )  -path [char] . scan nip

	hdr	x,'/EXT'	; size of file extension
sext:	call	docol
	dw	dpath
	dw	clit
	db	'.'
	dw	scan,nip
	dw	exit

;	+EXT  ( c-addr1 u1 c-addr2 u2 -- c-addr3 u3 )
;				2over /ext if 2drop end 3 min
;				s" ." 2rot -trailing (pfsiz-5) min zbuf
;				@ 1+ 0 +string +string +string

	hdr	1,'+EXT'	; uses filename buffer
pext:	call	docol
	dw	tover,sext
	dw	zbran,pext1
	dw	tdrop,exit
pext1:	dw	three,min
	dw	psqot
	dcs	'.'
	dw	trot
	dw	dtrai		; trim trailing blanks
	dw	clit
	db	pfsiz-5
	dw	min
	dw	zbuf,at		; unused
	dw	onep
	dw	zero
	dw	pstr
	dw	pstr
	dw	pstr
	dw	exit

;	-EXT  ( c-addr u1 -- c-addr u2 )  2dup /ext -

	hdr	1,'-EXT'
dext:	call	docol
	dw	tdup,sext
	dw	subb
	dw	exit

;	SETFCB  ( c-addr u fcb-addr -- user# )

	hdr	1,'SETFCB'
sfcb:	pop	de
	xor	a		; current drive
	ld	(de),a
	ld	(sfcb5+1),a
	dec	a		; 255 = current user
	ld	(sfcb10+1),a
	ld	l,c
	ld	h,b
	pop	bc
	ex	(sp),hl
	ex	de,hl
	jp	sfcb2

sfcb1:	inc	de
	dec	c
sfcb2:	call	sfcb12		; skip leading blanks/tabs
	cp	' '
	jp	z,sfcb1
	cp	tab
	jp	z,sfcb1
	push	de
	push	bc
	cp	'9'+1		; user number
	jp	c,sfcb3
	sub	'A'-1		; drive A-P
	jp	c,sfcb6
	cp	16+1
	jp	nc,sfcb6
	ld	(sfcb5+1),a
	call	sfcb11
	cp	':'
	jp	z,sfcb5

sfcb3:	ld	b,0
sfcb4:	sub	'0'
	jp	c,sfcb6
	cp	9+1
	jp	nc,sfcb6
	push	bc
	ld	c,a
	ld	a,b
	add	a,a
	add	a,a
	add	a,b
	add	a,a
	add	a,c
	pop	bc
	ld	b,a
	call	sfcb11
	cp	':'
	jp	nz,sfcb4

	ld	a,b
	cp	31+1		; user 0-31
	jp	nc,sfcb6
	ld	(sfcb10+1),a

sfcb5:	ld	(hl),0		; modified
	pop	af
	pop	af
	call	sfcb11
	jp	sfcb7

sfcb6:	pop	bc		; not du:
	pop	de
sfcb7:	ld	b,8
	call	sfcb15

	cp	'.'
	jp	z,sfcb8
	ld	c,1
sfcb8:	inc	de
	dec	c

	ld	b,3
	call	sfcb15

	ld	b,21		; clear EX..CR fields
sfcb9:	inc	hl
	ld	(hl),0
	dec	b
	jp	nz,sfcb9

	pop	bc
sfcb10:	ld	a,0		; modified
	jp	apush

sfcb11:	inc	de		; get next
	dec	c
sfcb12:	inc	c		; get char
	dec	c
	ld	a,c
	ret	z
	ld	a,(de)
	call	upc
	and	a
	ret

sfcb13:	call	sfcb12		; test delimiter
	cp	' '+1
	jp	c,sfcb14
	cp	','
	ret	z
	cp	'_'+1		; CP/M 3
	jp	nc,sfcb14
	cp	'.'
	ret	z
	cp	':'
	ret	c
	cp	'>'
	ret	nc
sfcb14:	cp	a
	ret

sfcb15:	call	sfcb13		; fill field
	jp	z,sfcb19
	inc	hl
	cp	'*'
	jp	nz,sfcb16
	ld	(hl),'?'
	jp	sfcb17

sfcb16:	ld	(hl),a
	inc	de
	dec	c
sfcb17:	dec	b
	jp	nz,sfcb15

sfcb18:	call	sfcb13		; scan delimiter
	ret	z
	inc	de
	dec	c
	jp	sfcb18

sfcb19:	inc	hl
	ld	(hl),' '
	dec	b
	jp	nz,sfcb19
	ret

	cseg

oldusr:	db	255

;	GETUSR  ( -- u )	get user

	hdr	1,'GETUSR'
getusr:	call	gusr
	jp	apush

;	SETUSR  ( u -- )	set user

	hdr	1,'SETUSR'
setusr:	call	gusr
	ld	(oldusr),a	; save current user
	pop	hl
	ld	a,l
setusr1:call	susr		; 255 has no-effect
	nextt

;	RSTUSR  ( -- )		restore user

	hdr	1,'RSTUSR'
rstusr:	ld	a,(oldusr)
	jp	setusr1

;	REC@  ( addr -- +d )	dup >r @ r> 2+ c@ 7 0 do d2* loop

	hdr	1,'REC@'
rcat:	pop	hl
	inc	hl
	inc	hl
	xor	a
	ld	a,(hl)
	rra
	ld	d,a
	dec	hl
	ld	a,(hl)
	rra
	ld	e,a
	dec	hl
	ld	a,(hl)
	rra
	ld	h,a
	ld	a,0
	rra
	ld	l,a
	ex	de,hl
	jp	dpush

;	REC!  ( +d addr -- )	>r 7 0 do d2/ loop r@ 2+ c! r> !

	hdr	1,'REC!'
rcsto:	pop	de
	ld	l,c
	ld	h,b
	pop	bc
	ex	(sp),hl
	ex	de,hl
	ld	a,e
	rla
	ld	a,d
	rla
	ld	(hl),a
	inc	hl
	ld	a,c
	rla
	ld	(hl),a
	inc	hl
	ld	a,b
	rla
	ld	(hl),a
	pop	bc
	jp	next

;	>FNAME  ( addr1 u -- addr2 )	-blanks max-path min zbuf @ pack
;					0 affix zbuf 2@ swap zbuf 2!

	hdr	1,'>FNAME'
tfnam:	call	docol
	dw	dblan
	dw	maxp
	dw	min
	dw	zbuf,at
	dw	pack
	dw	zero,affix	; trailing null
	dw	zbuf,tat
	dw	swap
	dw	zbuf,tstor
	dw	exit

;	fh  ( -- addr )

	hdr	x,'FH'
fh:	call	doval		; current file handle
fh1:	dw	0

;	/fh  ( -- )		#fcb (fhsiz) * hbuf over - swap erase

	hdr	x,'/FH'
zfh:	ld	hl,(nfh)
	ld	de,fhsiz
	call	umstrr
	ld	hl,(hbuf1)
	call	ssub
	push	hl
	push	de
	jp	erase

;	use  ( -- addr )	fh (fhsiz) negate * hbuf +

	hdr	x,'USE'
use:	ld	hl,(fh1)
	ld	de,-fhsiz
	call	umstrr
	ld	hl,(hbuf1)
	add	hl,de
	jp	hpush

;	uid  ( -- addr )	use 1+

	hdr	x,'UID'
uid:	call	docol		; user number
	dw	use,onep
	dw	exit

;	fcb  ( -- a )		use 6 +

	hdr	x,'FCB'
fcb:	call	docol		; FCB address
	dw	use
	dw	clit
	db	6
	dw	plus
	dw	exit

;	rwp@  ( -- ud )		use 2+ 2@

	hdr	x,'RWP@'
rwpat:	call	docol
	dw	use,twop
	dw	tat
	dw	exit

;	rwp!  ( ud -- )		use 2+ 2! ;

	hdr	x,'RWP!'
rwpst:	call	docol
	dw	use,twop
	dw	tstor
	dw	exit

;	#fcb  ( -- u )		number of file handles

	hdr	x,'#FCB'
nfcb:	ld	hl,(nfh)
	jp	hpush

;	getfh  ( -- fid | 0 )	#fcb 1+ begin 1- dup while dup to fh
;				use c@ 0= until then

	hdr	x,'GETFH'
gtfh:	call	docol		; get free handle, 0 if none
	dw	nfcb
	dw	onep
gtfh1:	dw	onem
	dw	dupp
	dw	zbran,gtfh2
	dw	dupp
	dw	pto,fh
	dw	use,cat
	dw	zequ
	dw	zbran,gtfh1
gtfh2:	dw	exit

;	setfh  ( fid mask -- 0 | err )	swap dup 1- #fcb u< if to fh
;					use c@ dup if and 0= 5 and end
;					then 2drop 6

	hdr	x,'SETFH'
stfh:	call	docol		; select/check handle
	dw	swap		; mode mask: 1=read 2=write 3=r/w
	dw	dupp,onem
	dw	nfcb,uless
	dw	zbran,stfh1
	dw	pto,fh
	dw	use,cat
	dw	dupp
	dw	zbran,stfh1
	dw	andd,zequ
	dw	clit
	db	5
	dw	andd
	dw	exit
stfh1:	dw	tdrop
	dw	clit
	db	6
	dw	exit

;	>IOR  ( err# -- ior )	dup if $fe00 or then

	hdr	1,'>IOR'
iorr:	pop	hl
	ld	a,h
	or	l
	jp	z,iorr1
	ld	h,0feh
iorr1:	jp	hpush

;	FILE-POSITION  ( fid -- ud ior )  3 setfh rwp@ rot >ior

	hdr	1,'FILE-POSITION'
fpos:	call	docol
	dw	three,stfh
	dw	rwpat
	dw	rot
	dw	iorr
	dw	exit

;	REPOSITION-FILE  ( ud fid -- ior )  3 setfh dup >r if 2drop else
;					    rwp! then r> >ior

	hdr	1,'REPOSITION-FILE'
reposf:	call	docol
	dw	three,stfh
	dw	dupp,tor
	dw	zbran,reposf1
	dw	tdrop
	dw	bran,reposf2
reposf1:dw	rwpst
reposf2:dw	fromr
	dw	iorr
	dw	exit

;	xf5  ( mask fcb -- )	5 + tuck c@ over or swap >< and swap c!

	hdr	x,'XF5'
xf5:	pop	hl
	ld	de,5
	add	hl,de
	ld	a,(hl)		; f5
	pop	de
	or	e
	and	d
	ld	(hl),a
	jp	next

;	FLUSH-FILE  ( fid -- ior )	3 setfh dup 0= if uid c@ setusr
;					fcb $FF80 over xf5 dup 16 bdos
;					drop $7F00 over xf5 35 bdos drop
;					rstusr then >ior

	hdr	1,'FLUSH-FILE'
flusf:	call	docol
	dw	three,stfh
	dw	dupp,zequ
	dw	zbran,flusf1
	dw	uid,cat
	dw	setusr
	dw	fcb
	dw	lit,0FF80h	; set partial close bit (CPM3,MPM2)
	dw	over,xf5
	dw	dupp
	dw	clit
	db	16
	dw	bdos,drop
	dw	lit,7F00h	; reset bit (CPM3,CPM2)
	dw	over,xf5
	dw	clit
	db	35
	dw	bdos,drop
	dw	rstusr
flusf1:	dw	iorr
	dw	exit

;	FILE-SIZE  ( fid -- ud ior )	flush-file fcb 33 + rec@ rot

	hdr	1,'FILE-SIZE'
fsiz:	call	docol
	dw	flusf
	dw	fcb
	dw	clit
	db	33
	dw	plus
	dw	rcat
	dw	rot
	dw	exit

;	FILE-FCB  ( fid -- fcb user ior )  3 setfh fcb uid c@ rot >ior

	hdr	1,'FILE-FCB'
ffcb:	call	docol
	dw	three,stfh
	dw	fcb
	dw	uid,cat
	dw	rot
	dw	iorr
	dw	exit

;	CLOSE-FILE  ( fid -- ior )	3 setfh dup 0= if use c! uid c@
;					setusr fcb 16 bdos rstusr 255 =
;					2 and then >ior

	hdr	1,'CLOSE-FILE'
closf:	call	docol
	dw	three,stfh
	dw	dupp
	dw	zequ
	dw	zbran,closf2
	dw	use,cstor
	dw	uid,cat
	dw	setusr
	dw	fcb
	dw	clit
	db	16
closf1:	dw	bdos
	dw	rstusr
	dw	clit
	db	255
	dw	equal
	dw	two,andd
closf2:	dw	iorr
	dw	exit

;	R/O  ( -- fam )			aka 0 r/o

	hdr	1,'R/O',,,zero
rso	equ	zero

;	W/O  ( -- fam )			aka 1 w/o

	hdr	1,'W/O',,,one
wso	equ	one

;	R/W  ( -- fam )			aka 2 r/w

	hdr	1,'R/W',,,two
rsw	equ	two

;	BIN  ( fam1 -- fam2 )		aka noop bin immediate

	hdr	1,'BIN',1,,noop
binn	equ	next

;	open1  ( addr u fam -- | x ior )
;					getfh 0= if 2drop 4 >ior unnest end
;					1+ use c! >fname count fcb
;					setfcb dup uid c! setusr 0 0 rwp!

	hdr	x,'OPEN1'
open1:	call	docol
	dw	gtfh,zequ
	dw	zbran,open11
	dw	tdrop
	dw	clit
	db	4
	dw	iorr
	 if	debug
	dw	pdotq
	dcs	'UNNEST_OPEN1'
	 endif
	dw	unnest
	dw	exit
open11:	dw	onep
	dw	use,cstor
	dw	tfnam,count
	dw	fcb
	dw	sfcb
	dw	dupp
	dw	uid,cstor
	dw	setusr
	dw	zero,zero
	dw	rwpst
	dw	exit

;	open2  ( fn# -- fid flag )	fh fcb rot bdos 255 = rstusr

	hdr	x,'OPEN2'
open2:	call	docol
	dw	fh
	dw	fcb
	dw	rot
	dw	bdos
	dw	clit
	db	255
	dw	equal
	dw	rstusr
	dw	exit

;	open3  ( flag err -- | ior )	and >ior ?dup if 0 use c! unnest
;					then

	hdr	x,'OPEN3'
open3:	call	docol
	dw	andd
	dw	iorr
	dw	qdup
	dw	zbran,open31
	dw	zero
	dw	use,cstor
	 if	debug
	dw	pdotq
	dcs	'UNNEST_OPEN3'
	 endif
	dw	unnest
open31:	dw	exit

;	OPEN-FILE  ( c-addr u fam -- fid ior )
;					open1 15 open2 2 open3 fcb 9 + c@
;					6 rshift use c@ and 1 > 5 open3 0

	hdr	1,'OPEN-FILE'
openf:	call	docol
	dw	open1
	dw	clit
	db	15
	dw	open2
	dw	two,open3
	dw	fcb		; test if file R/O and mode=write
	dw	clit
	db	9
	dw	plus,cat
	dw	clit
	db	6
	dw	rsh
	dw	use,cat,andd
	dw	one,great
openf1:	dw	clit
	db	5
	dw	open3
	dw	zero
	dw	exit

;	CREATE-FILE  ( c-addr u fam -- fid ior )
;					open1 fcb 19 bdos drop 22 open2
;					5 open3 0

	hdr	1,'CREATE-FILE'
creatf:	call	docol
	dw	open1
	dw	fcb
	dw	clit
	db	19
	dw	bdos,drop
	dw	clit
	db	22
	dw	open2
	dw	bran,openf1

;	>FCB  ( c-addr u -- fcb usr )	2dup >fname 18 + -rot 2 pick setfcb

	hdr	1,'>FCB'
tfcb:	call	docol
	dw	tdup,tfnam
	dw	clit
	db	18
	dw	plus
	dw	drot
	dw	two,pick
	dw	sfcb
	dw	exit

;	DELETE-FILE  ( c-addr u -- ior )  >fcb setusr 19 bdos rstusr 255 = 2
;					and >ior

	hdr	1,'DELETE-FILE'
delf:	call	docol
	dw	tfcb,setusr
	dw	clit
	db	19
	dw	bran,closf1

;	RENAME-FILE  ( c-addr1 u1 c-addr2 u2 -- ior )
;					2swap >fcb setusr >r >fcb drop r@ c@
;					over c! dup 15 bdos 255 = if r@ 16 +
;					16 cmove r> 23 bdos 255 = 2 and >ior
;					else 16 bdos r> 2drop 5 >ior then
;					rstusr

	hdr	1,'RENAME-FILE'
renf:	call	docol
	dw	tswap
	dw	tfcb,setusr,tor
	dw	tfcb,drop
	dw	rat,cat
	dw	over,cstor
	dw	dupp
	dw	clit
	db	15
	dw	bdos
	dw	clit
	db	255
	dw	equal
	dw	zbran,renf1
	dw	rat
	dw	clit
	db	16
	dw	plus
	dw	clit
	db	16
	dw	cmove,fromr
	dw	clit
	db	23
	dw	bran,closf1
renf1:	dw	clit
	db	16
	dw	bdos
	dw	fromr,tdrop
	dw	clit
	db	5
	dw	iorr
	dw	rstusr
	dw	exit

;	offs  ( -- x )			integer offs

	hdr	x,'OFFS'
offs:	call	doval
	dw	0

;	setsiz  ( -- size )		rwp@ over $7F and to offs fcb 33 +
;					rec! (recsiz) offs -

	hdr	x,'SETSIZ'
setsiz:	call	docol
	dw	rwpat,over
	dw	clit
	db	7fh
	dw	andd
	dw	pto,offs
	dw	fcb
	dw	clit
	db	33
	dw	plus,rcsto
	dw	clit
	db	recsiz
	dw	offs,subb
	dw	exit

;	ranrw  ( a size fn# -- a size | a u' )
;					fcb swap bdos if drop unnest r> then

	hdr	x,'RANRW'
ranrw:	call	docol
	dw	fcb,swap,bdos
	dw	zbran,ranrw1
	dw	drop
	 if	debug
	dw	pdotq
	dcs	'UNNEST_RW'
	 endif
	dw	unnest
	dw	fromr		; count remaining
ranrw1:	dw	exit

;	rdini  ( a u fid -- a u | 0 ior )
;					1 setfh ?dup if nip >ior unnest then

	hdr	x,'RDINI'
rdini:	call	docol
	dw	one,stfh,qdup
	dw	zbran,rdini1
	dw	nip
	dw	iorr
	 if	debug
	dw	pdotq
	dcs	'UNNEST_RDINI'
	 endif
	dw	unnest
rdini1:	dw	exit

;	fread  ( a u1 -- a u2 )		begin dup while >r setsiz r@ umin
;					dup (recsiz) = if over setdma 33
;					ranrw else hbuf setdma 33 ranrw 2dup
;					hbuf offs + -rot cmove then dup >r +
;					rwp@ r@ m+ rwp! 2r> - repeat

	hdr	x,'FREAD'
fread:	call	docol
fread1:	dw	dupp
	dw	zbran,fread4
	dw	tor
	dw	setsiz
	dw	rat,umin
	dw	dupp
	dw	clit
	db	recsiz
	dw	equal
	dw	zbran,fread2
	dw	over,setdma
	dw	clit
	db	33
	dw	ranrw
	dw	bran,fread3
fread2:	dw	hbuf,setdma
	dw	clit
	db	33
	dw	ranrw
	dw	tdup,hbuf
	dw	offs,plus
	dw	drot,cmove
fread3:	dw	dupp,tor
	dw	plus
	dw	rwpat
	dw	rat,mplus
	dw	rwpst
	dw	tfrom,subb
	dw	bran,fread1
fread4:	dw	exit

;	wrini  ( a u fid -- a u | ior )
;					2 setfh ?dup if nip nip >ior unnest
;					then

	hdr	x,'WRINI'
wrini:	call	docol
	dw	two,stfh,qdup
	dw	zbran,wrini1
	dw	nip,nip
	dw	iorr
	 if	debug
	dw	pdotq
	dcs	'UNNEST_WRINI'
	 endif
	dw	unnest
wrini1:	dw	exit

;	fwrite  ( a u1 -- a u2 )	begin dup while >r setsiz r@ umin dup
;					(recsiz) = if over setdma else hbuf
;					(recsiz) $1A fill hbuf setdma fcb 33
;					bdos drop 2dup hbuf offs + swap cmove
;					then 34 ranrw dup >r + rwp@ r@ m+
;					rwp! 2r> - repeat

	hdr	x,'FWRITE'
fwrit:	call	docol
fwrit1:	dw	dupp
	dw	zbran,fwrit4
	dw	tor
	dw	setsiz
	dw	rat,umin
	dw	dupp
	dw	clit
	db	recsiz
	dw	equal
	dw	zbran,fwrit2
	dw	over,setdma
	dw	bran,fwrit3
fwrit2:	dw	hbuf
	dw	clit
	db	recsiz
	dw	clit
	db	ctlz
	dw	fill
	dw	hbuf,setdma
	dw	fcb
	dw	clit
	db	33
	dw	bdos,drop	; allow read unwritten
	dw	tdup
	dw	hbuf
	dw	offs,plus
	dw	swap
	dw	cmove
fwrit3:	dw	clit
	db	34
	dw	ranrw
	dw	dupp,tor
	dw	plus
	dw	rwpat
	dw	rat,mplus
	dw	rwpst
	dw	tfrom,subb
	dw	bran,fwrit1
fwrit4:	dw	exit

;	READ-FILE  ( c-addr u1 fid -- u2 ior )  rdini uid c@ setusr tuck
;					fread rstusr nip - 0

	hdr	1,'READ-FILE'
readf:	call	docol
	dw	rdini
	dw	uid,cat
	dw	setusr
	dw	tuck
	dw	fread
	dw	rstusr
	dw	nip
	dw	subb
	dw	zero
	dw	exit

;	WRITE-FILE  ( c-addr u fid -- ior )  wrini uid c@ setusr fwrite
;					rstusr nip 0<> 255 and >ior

	hdr	1,'WRITE-FILE'
writf:	call	docol
	dw	wrini
	dw	uid,cat
	dw	setusr
	dw	fwrit
	dw	rstusr
	dw	nip
	dw	zneq
	dw	clit
	db	255
	dw	andd
	dw	iorr
	dw	exit

;	WRITE-LINE  ( c-addr u fileid -- ior )
;				dup >r write-file ?dup if rdrop end
;				(cr) r> write-file

	hdr	1,'WRITE-LINE'
writl:	call	docol
	dw	dupp,tor
	dw	writf,qdup
	dw	zbran,writl1
	dw	rdrop
	dw	exit
writl1:	dw	pcr
	dw	fromr
	dw	writf
	dw	exit

;	READ-LINE  ( c-addr u1 fid -- u2 n ior )
;				>r over swap r> read-file ?dup if end
;				2dup bounds ?do i c@ $1A of i rot - fh
;				file-size drop rwp! break (cr) rot scan
;				nip ?dup if i + >r over + r> swap - s>d
;				rwp@ d+ rwp! i swap - -1 0 unloop end
;				loop nip dup 0<> negate 0

	hdr	1,'READ-LINE'
readl:	call	docol
	dw	tor,over,swap,fromr
	dw	readf,qdup
	dw	zbran,readl1
	dw	exit
readl1:	dw	tdup,bounds
	dw	xqdo,readl5
readl2:	dw	ido,cat
	dw	clit
	db	ctlz
	dw	pof,readl3
	dw	ido,rot,subb
	dw	fh,fsiz,drop,rwpst
	dw	pleav,readl2-cw
readl3:	dw	pcr,rot
	dw	scan,nip
	dw	qdup
	dw	zbran,readl4
	dw	ido,plus,tor
	dw	over,plus
	dw	fromr,swap,subb
	dw	stod		; buffer must be < 32K
	dw	rwpat,dplus,rwpst
	dw	ido,swap,subb
	dw	true,zero
	dw	unloo,exit
readl4:	dw	xloop,readl2
readl5:	dw	nip
	dw	dupp,zneq
	dw	negat,zero
	dw	exit

; screen file selector

	aseg

fdt:	gfdb			; fdb table

;	sfp  ( -- a )

	hdr	x,'SFP',,1
sfp:	call	docre
sfp1:	dw	fdt		; current
sfp2:	dw	fdt+cw		; swap-file

;	SWAP-FILE  ( -- )	screen? if scr @ scr# ! then sfp 2@
;				swap sfp 2! scr# @ scr ! empty-buffers

	hdr	1,'SWAP-FILE',,1
swapf:	call	docol
	dw	scrnq
	dw	zbran,swapf1
	dw	scr,at
	dw	snum,store
swapf1:	dw	sfp,tat
	dw	swap
	dw	sfp,tstor
	dw	snum,at
	dw	scr,store
	dw	mtbuf
	dw	exit

;	FDB  ( -- addr )	(fdt) (nfd) 0 do dup @ @ 0= if unloop end
;				cell+ loop abort" too many files"

	hdr	1,'FDB',,1	; get a free slot
fdb:	ld	hl,fdt
	ld	a,nfd
fdb1:	push	af
;	ld	de,sfp2		; skip swap-file
;	call	cmpu
;	jp	z,fdb2
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	ex	de,hl
	ld	a,(hl)
	inc	hl
	or	(hl)
	ex	de,hl
	jp	z,fdb3
fdb2:	inc	hl
	inc	hl
	pop	af
	dec	a
	jp	nz,fdb1
	push	hl		; non-zero
	call	docol
	dw	pabq
	dcs	'too many files'

fdb3:	pop	af
	jp	hpush

; file descriptor fields
;
;	FD	cell		status 0=closed
;	FID	cell		file handle
;	BLKS	cell		file size (blocks)
;	SCR#	cell		current SCR#
;	FNB	'pfsiz' bytes	file name

;	fd  ( -- addr )

	hdr	x,'FD',,1
fd:	call	docol		; file descriptor field
	dw	sfp,at,at
	dw	exit

;	fid  ( -- addr )

	hdr	x,'FID',,1
fid:	ld	e,cw*1		; file handle field
fid1:	ld	d,0
	push	de
	call	docol
	dw	fd,plus
	dw	exit

;	blks  ( -- addr )

	hdr	x,'BLKS',,1
blks:	ld	e,cw*2		; file size field
	jp	fid1

;	scr#  ( -- addr )

	hdr	x,'SCR#',,1
snum:	ld	e,cw*3		; current SCR# field
	jp	fid1

;	fnb  ( -- addr )

	hdr	x,'FNB',,1
fnb:	ld	e,cw*4		; file name field
	jp	fid1

;	buf	( -- addr )

	hdr	x,'BUF',,1
buf:	call	docon		; file buffer address
	dw	sfb

;	blk#  ( -- addr )

	hdr	x,'BLK#',,1
bnum:	call	docre		; block#, update flag
bnum1:	ds	cw

;	SCREEN?  ( -- flag )	fd @ 0<

	hdr	1,'SCREEN?',,1
scrnq:	call	docol
	dw	fd,at
	dw	zless
	dw	exit

;	LOADFILE  ( -- c-addr u )  fnb count

	hdr	1,'LOADFILE',,1
loadf:	call	docol
	dw	fnb,count
	dw	exit

;	?open  ( -- )		screen? 0= abort" no file"

	hdr	x,'?OPEN',,1
qopen:	call	docol
	dw	scrnq
	dw	zequ
	dw	pabq
	dcs	'no file'
	dw	exit

;	#SCREENS  ( -- +n )	?open blks @

	hdr	1,'#SCREENS',,1
nscr:	call	docol
	dw	qopen
	dw	blks,at
	dw	exit

;	EMPTY-BUFFERS  ( -- )	$7fff blk# !

	hdr	1,'EMPTY-BUFFERS',,1
mtbuf:	ld	hl,7fffh
	ld	(bnum1),hl
	nextt

;	UPDATE	( -- )		?open blk# @ $8000 or blk# !

	hdr	1,'UPDATE',,1
update:	call	docol
	dw	qopen
	dw	bnum,at
	dw	lit,8000h
	dw	orr
	dw	bnum,store
	dw	exit

;	blkerr  ( flag -- )	abort" block r/w error"

	hdr	x,'BLKERR',,1
blkerr:	call	docol
	dw	pabq
	dcs	'block r/w error'
	dw	exit

;	blk-rw  ( +n mode -- )	>r b/buf um* fid @ reposition-file blkerr
;				buf b/buf fid @ r> if write-file blkerr
;				fid @ flush-file else read-file blkerr
;				b/buf < then blkerr

	hdr	x,'BLK-RW',,1
blkrw:	call	docol
	dw	tor
	dw	bbuf,umstr
	dw	fid,at
	dw	reposf
	dw	blkerr
	dw	buf,bbuf
	dw	fid,at
	dw	fromr
	dw	zbran,blkrw1
	dw	writf
	dw	blkerr
	dw	fid,at
	dw	flusf		; flush CP/M 3 buffers
	dw	bran,blkrw2
blkrw1:	dw	readf
	dw	blkerr
	dw	bbuf,less
blkrw2:	dw	blkerr
	dw	exit

;	?blk  ( +n -- +n )	dup #screens u< not abort" block range"

	hdr	x,'?BLK',,1
qblk:	call	docol
	dw	dupp,nscr
	dw	uless,nott	; block in range?
	dw	pabq
	dcs	'block range'
	dw	exit

;	SAVE-BUFFERS  ( -- )	?open blk# @ 0< if blk# @ $7fff and
;				dup blk# ! ?blk 1 blk-rw then

	hdr	1,'SAVE-BUFFERS',,1
savbuf:	call	docol
	dw	qopen
	dw	bnum,at
	dw	zless
	dw	zbran,savbuf1
	dw	bnum,at
	dw	lit,7fffh
	dw	andd
	dw	dupp
	dw	bnum,store
	dw	qblk		; block in range?
	dw	one,blkrw
savbuf1:dw	exit

;	FLUSH  ( -- )		save-buffers empty-buffers

	hdr	1,'FLUSH',,1
flush:	call	docol
	dw	savbuf,mtbuf
	dw	exit

;	BUFFER	( +n -- addr )	save-buffers ?blk blk# ! buf

	hdr	1,'BUFFER',,1
buffer:	call	docol
	dw	savbuf
	dw	qblk
	dw	bnum,store
	dw	buf
	dw	exit

;	BLOCK  ( +n -- addr )	?open blk# @ $7fff and over - if dup
;				buffer drop 0 blk-rw else drop then buf

	hdr	1,'BLOCK',,1
block:	call	docol
	dw	qopen
	dw	bnum,at
	dw	lit,7fffh
	dw	andd
	dw	over,subb
	dw	zbran,block1
	dw	dupp,buffer,drop
	dw	zero,blkrw
	dw	bran,block2
block1:	dw	drop
block2:	dw	buf
	dw	exit

;	-->  ( -- )		blk @ 0= abort" loading only" (refill) drop
;				;immediate

	hdr	1,'-->',1,1
arrow:	call	docol
	dw	blk,at
	dw	zequ
	dw	pabq
	dcs	'loading only'
	dw	prefil,drop
	dw	exit

;	(thru)  ( +n1 +n2 -- )	1+ swap ?do i block b/buf i (eval) loop

	hdr	x,'(THRU)',,1
pthru:	call	docol
	dw	onep,swap
	dw	xqdo,pthru2
pthru1:	dw	ido,block
	dw	bbuf
	dw	ido,peval
	dw	xloop,pthru1
pthru2:	dw	exit

;	THRU  ( +n1 +n2 -- )	(thru) ?block

	hdr	1,'THRU',,1
thru:	call	docol
	dw	pthru
	dw	qblock
	dw	exit

;	LOAD  ( +n -- ) 	dup thru

	hdr	1,'LOAD',,1
load:	pop	hl
	push	hl
	push	hl
	jp	thru

;	fnbuf  ( -- addr )

	hdr	x,'FNBUF',,1
fnbuf:	call	docre		; current file handle
	ds	pfsiz

;	(fbk)  ( +n -- )	#screens 2dup u< if drop dup loadfile -ext
;				s" $$$" +ext fnbuf pack count w/o
;				create-file throw over 0 ?do dup i block
;				b/buf rot write-file throw loop close-file
;				throw fid @ close-file throw loadfile
;				delete-file throw fnbuf count loadfile
;				rename-file throw loadfile r/w open-file
;				throw fid ! then over blks ! ?do i buffer
;				b/buf blank update save-buffers loop

	hdr	x,'(FBK)',,1
pfbk:	call	docol
	dw	nscr		; tests if file open
	dw	tdup,uless
	dw	zbran,pfbk3
	dw	drop,dupp
	dw	loadf,dext
	dw	psqot
	dcs	'$$$'
	dw	pext
	dw	fnbuf,pack
	dw	count,wso
	dw	creatf,throw
	dw	over,zero
	dw	xqdo,pfbk2
pfbk1:	dw	dupp
	dw	ido,block
	dw	bbuf
	dw	rot,writf,throw
	dw	xloop,pfbk1
pfbk2:	dw	closf,throw
	dw	fid,at
	dw	closf,throw
	dw	loadf,delf,throw
	dw	fnbuf,count
	dw	loadf,renf,throw
	dw	loadf
	dw	rsw,openf,throw
	dw	fid,store
pfbk3:	dw	over
	dw	blks,store	; update max block
	dw	xqdo,pfbk5
pfbk4:	dw	ido,buffer
	dw	bbuf,blank
	dw	update,savbuf
	dw	xloop,pfbk4
pfbk5:	dw	exit

;	FILEBLOCKS  ( +n -- )	['] (fbk) catch abort" can't resize"

	hdr	1,'FILEBLOCKS',,1
fbloc:	call	docol
	dw	lit,pfbk
	dw	catch
	dw	pabq
	dcs	"can't resize"
	dw	exit

;	(close)  ( -- )		fd @ if fid @ close-file drop then
;				fd [ 4 cells 1+ ] literal erase

	hdr	x,'(CLOSE)',,1
pclos:	call	docol
	dw	fd,at		; screen or text
	dw	zbran,pclos1
	dw	fid,at
	dw	closf,drop
pclos1:	dw	fd
	dw	clit
	db	(4*cw)+1
	dw	erase
	dw	exit

;	CLOSE  ( -- )		screen? if flush (close) then
;
; NOTE: errors are NOT reported with this function

	hdr	1,'CLOSE',,1	; close current screen
close:	call	docol
	dw	scrnq
	dw	zbran,close1
	dw	flush
	dw	pclos
close1:	dw	exit

;	CLOSE-ALL  ( -- )	close (fdt) nfd 0 do dup sfp ! (close)
;				cell+ loop drop

	hdr	1,'CLOSE-ALL',,1
closa:	call	docol
	dw	close		; ensure buffer flushed
	dw	lit,fdt
	dw	clit
	db	nfd
	dw	zero
	dw	xdo,closa2
closa1:	dw	dupp
	dw	sfp,store
	dw	pclos
	dw	cellp
	dw	xloop,closa1
closa2:	dw	drop
	dw	exit

;	LASTFILE  ( -- c-addr u )	zbuf cell+ @ count

	hdr	1,'LASTFILE',,1
lastf:	call	docol		; last named file used by open-file etc
	dw	zbuf,cellp
	dw	at,count
	dw	exit

;	.lastfile  ( -- )	beep cr lastfile type space

	hdr	x,'.LASTFILE',,1
dotlf:	call	docol
	dw	beep,crr
	dw	lastf,typee
	dw	space
	dw	exit

;	?create  ( c-addr u -- fileid )
;				r/o open-file 0= tuck if close-file then
;				drop if .lastfile ." exists - delete it? "
;				y/n 0= if abort then then lastfile r/w
;				create-file abort" can't create"

	hdr	x,'?CREATE',,1
qcreat:	call	docol
	dw	rso,openf	; test if file exists
	dw	zequ,tuck
	dw	zbran,qcreat1
	dw	closf
qcreat1:dw	drop
	dw	zbran,qcreat2
	dw	dotlf
	dw	pdotq
	dcs	'exists - delete it? '
	dw	yn,zequ
	dw	zbran,qcreat2
	dw	abort
qcreat2:dw	lastf,rsw,creatf
	dw	pabq
	dcs	"can't create"
	dw	exit

;	init-scr  ( fileid ior -- )	if drop end fdb sfp ! fd on
;					dup fid ! file-size drop b/buf
;					um/mod nip blks ! lastfile fnb
;					pack count upper empty-buffers

	hdr	x,'INIT-SCR',,1
iniscr:	call	docol		; init screenfile
	dw	zbran,iniscr1
	dw	drop
	dw	exit
iniscr1:dw	fdb,sfp,store
	dw	fd,on		; -1 = screen file, 1 = text file
	dw	dupp,fid,store
	dw	fsiz,drop
	dw	bbuf,umslm,nip	; overflow stores $FFFF
	dw	blks,store
	dw	lastf,fnb,pack
	dw	count,upper
	dw	mtbuf
	dw	exit

;	OPEN  ( c-addr u fam -- ior )	fdb drop >r s" scr" +ext r>
;					open-file tuck init-scr

	hdr	1,'OPEN',,1	; open a screen file
open:	call	docol
	dw	fdb,drop	; free slot?
	dw	tor
	dw	psqot
	dcs	'scr'
	dw	pext
	dw	fromr,openf
	dw	tuck
	dw	iniscr
	dw	exit

;	(open)  ( c-addr u -- )		r/w open abort" can't open"

	hdr	x,'(OPEN)',,1
popen:	call	docol
	dw	rsw,open
	dw	pabq
	dcs	"can't open"
	dw	exit

;	GETFILENAME  ( -- c-addr u )	token dup 0= abort" no filename"

	hdr	1,'GETFILENAME',,1
getfn:	call	docol
	dw	token
	dw	dupp,zequ
	dw	pabq
	dcs	'no filename'
	dw	exit

;	USING  ( "filename[.SCR]" -- )	close getfilename r/w open ?dup if
;					.lastfile -507 = if ." access denied"
;					0 else ." not found - create it? "
;					y/n then 0= if abort then lastfile
;					?create 0 init-scr then 0 0 scr 2!

	hdr	1,'USING',,1	; open/make a screen file
using:	call	docol
	dw	close
	dw	getfn
	dw	rsw,open,qdup
	dw	zbran,using4
	dw	dotlf
	dw	lit,-507
	dw	equal
	dw	zbran,using1
	dw	pdotq
	dcs	'access denied'
	dw	zero
	dw	bran,using2
using1:	dw	pdotq
	dcs	'not found - create it? '
	dw	yn
using2:	dw	zequ
	dw	zbran,using3
	dw	abort
using3:	dw	lastf,qcreat
	dw	zero,iniscr
using4:	dw	zero,zero	; reset SCR
	dw	scr,tstor
	dw	exit

;	LOADED  ( +n1 +n2 c-addr u -- )	sfp @ >r (open) (thru) close r>
;					sfp ! ?block

	hdr	1,'LOADED',,1
loaded:	call	docol
	dw	sfp,at
	dw	tor
	dw	popen
	dw	pthru
	dw	close
	dw	fromr
	dw	sfp,store
	dw	qblock
	dw	exit

;	FLOAD  ( +n "filename[.SCR]" -- )  dup getfilename loaded

	hdr	1,'FLOAD',,1
fload:	call	docol
	dw	dupp
	dw	getfn
	dw	loaded
	dw	exit

;	SAVE  ( "filename[.COM]" -- )
;			0 0 protect getfilename s" com" +ext ?create
;			>r over swap boot 2! [ (logo) (zb1) ] 2literal
;			(elogo-logo) cmove (z3eadr) dup @ over off
;			$100 dp @ over - r@ write-file -rot swap !
;			boot cell+ off ?dup 0= if (hm) dph @ over -
;			rot 0= and r@ write-file then r> close-file
;			or abort" can't save"

	hdr	1,'SAVE',,1
save:	call	docol
	dw	zero,zero
save1:	dw	prot
	dw	getfn
	dw	psqot
	dcs	'com'
	dw	pext
	dw	qcreat
	dw	tor		; fid
	dw	over,swap	; set boot flags
	dw	boot,tstor
	dw	tlit		; insert compiler logo
	dw	zb1,logo
	dw	clit
	db	elogo-logo
	dw	cmove
	dw	lit,z3eadr
	dw	dupp,at		; save ZENV
	dw	over,off	; clear it
	dw	lit,100h
	dw	dpp,at
	dw	over,subb
	dw	rat,writf	; save application
	dw	drot
	dw	swap,store	; restore ZENV
	dw	boot,cellp,off	; reset forth flag
	dw	qdup,zequ
	dw	zbran,save2
	dw	lit,hm
	dw	dph,at
	dw	over,subb
	dw	rot,zequ,andd	; system size
	dw	rat,writf	; save system
save2:	dw	fromr,closf,orr
	dw	pabq
	dcs	"can't save"
	dw	exit

;	TURNKEY  ( "bootword" "filename[.COM]" -- )

	hdr	1,'TURNKEY',,1
turnk:	call	docol
	dw	true
turnk1:	dw	tick
	dw	bran,save1

;	TURNKEY-SYSTEM  ( "bootword" "filename[.COM]" -- )

	hdr	1,'TURNKEY-SYSTEM',,1
turnks:	call	docol
	dw	zero
	dw	bran,turnk1

;	end

