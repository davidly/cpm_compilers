\ Forth co-operative multitasker                                /TASKER ( -- )              initialize multitasker              TCB ( u s r "ccc" ; -- tcb )  create a task control block       HIS ( tcb user -- user' )   get a task's user variable address  ACTIVATE ( tcb -- )         initialize stacks and run task      WAKE/SLEEP ( tcb -- )       resume/suspend a task               STOP ( -- )                 stop current task, switch to next   MULTI/SINGLE ( -- )         enable/disable multitasker          PAUSE ( -- )                switch to next active task          GRAB/RELEASE ( sem -- )     grab/release resource               GET ( sem -- )              pause then grab resource            #FLOAT ( -- u )             per-task f/p stack bytes                                                                                                                                                                                                                                                                            \ Load screen                                                   forth definitions  decimal  application                                                                                         cr ." loading Multitasker 2 "  2 #screens 1- thruefine reserved user variables                                0 user TOS                      \ save top of stack             2 user STATUS                   \ task status                   4 user LINK                     \ link to next task's user                                                                      integer tlink  link to tlink    \ topmost LINK                                                                                  \ Calculate task local user address                             : HIS ( tcb user -- user' )  tos - + ;                                                                                                                                                                                                                                                                                                                                                                                                                          \ (pause)                                                       \ Pause current task & switch to next active                    code (pause) ( -- )                                              ( fsp lhld  h push)  b push  rpp lhld  h push  \ push FSP IP RP  0 h lxi  sp dad                           \ save SP to TOS      xchg  up lhld  e m mov  h inx  d m mov                          h inx  h inx                                                  1 $:  h inx  m e mov  h inx  m d mov        \ find active task    xchg  m a mov  h inx  m ora  1 $ jnz                            h dcx                                                           h dcx  h dcx  up shld                     \ load UP             m e mov  h inx  m d mov  xchg  sphl       \ restore SP          h pop  rpp shld  b pop  ( h pop  fsp shld)   \ pop RP IP FSP    next  end-code                                                                                                                                                                                \ WAKE SLEEP STOP MULTI SINGLE /TASKER                          \ Resume/suspend a task                                         : WAKE ( tcb -- )  cell+ off ;                                  : SLEEP ( tcb -- )  cell+ on ;                                                                                                  \ Stop current task & switch to next active                     : STOP ( -- )  up @ sleep  pause ;                                                                                              \ Enable/disable multitasker                                    : MULTI ( -- )  ['] (pause) is pause ;                          : SINGLE ( -- )  ['] noop is pause ;                                                                                            \ Initialize multitasker; run once at start-up                  : /TASKER ( -- )                                                  up @  dup wake  status his tlink !  single ;  /tasker                                                                         \ (activate)                                                    \ Initialize stacks & wake task                                 : (activate) ( tcb -- )                                           dup s0 his @                   \ get task stack               \  cell-  over fs0 his @  over !  \ push FS0                      cell-  r>  over !              \ push start IP                  cell-  over r0 his @  over !   \ push R0                        over tos his !                 \ set TOS                        dup catcher his off            \ set CATCHER                    wakesystem                                                          \ Execution begins with word following ACTIVATE                 : ACTIVATE  ?comp postpone (activate) ; immediate               applicationsystem                                                          \ integer #FLOAT  fs0 @ s0 @ - to #float  \ f/p stack bytes                                                                     \ create task control block                                     : TCB ( u s r "ccc" ; -- tcb )                                    here 1 and allot ( align)  here >r    \ base                    rot dup allot  up @ r@ rot cmove      \ copy USER vars          here dup r@ dp his 2!                 \ DP DPS                  swap allot  here r@ s0 his !          \ S0                    \  #float allot  here r@ fs0 his !       \ FS0                    allot  here r@ r0 his !               \ R0                      r@ sleep  r@ status his tlink !       \ sleep & add task        r@ link his to tlink  /tasker         \                         r> constant ;                                                 application                                                     \ GRAB GET RELEASE                                              \ Grab resource                                                 code GRAB ( sem -- )                                              up lhld  xchg  h pop  m a mov  h inx  m ora  2 $ jz             m a mov  d cmp  h dcx  1 $ jnz  m a mov  e cmp  3 $ jz          1 $:  h push  b dcx  b dcx  ' (pause) jmp                       2 $:  d m mov  h dcx  e m mov  3 $:  next  end-code                                                                           \ Pause then grab resource                                      : GET ( sem -- )  pause grab ;                                                                                                  \ Release resource                                              code RELEASE ( sem -- )                                           up lhld  xchg  h pop  e a mov  m sub  1 $ jnz  d a mov  h inx   m sbb  1 $ jnz  a m mov  h dcx  a m mov  1 $:  next  end-code                                                                 \ discard heads                                                 behead tlink tlink                                              behead (pause) (pause)                                          behead (activate) (activateemo 1                                                       variable SCREEN  screen off  #user  dup user CNT  1 cells +     ( u) dup 128 64 tcb DCOUNTING  \ task1 control block            ( u)     128 64 tcb HCOUNTING  \ task2 control block                                                                            : DCOUNTER ( -- )  dcounting activate  decimal  0 cnt !           begin  screen get  0 2 at-xy  cnt @  dup 0 10 d.r               1+ cnt !  screen release  pause  again ;                                                                                      : HCOUNTER ( -- )  hcounting activate  hex  0 cnt !               begin  screen get  15 2 at-xy  cnt @  dup 0 10 d.r              1- cnt !  screen release  pause  again ;                                                                                      : RUN ( -- )  /tasker  page ." 2 tasks counting:"                 dcounter hcounter multi  begin key? until key  drop single ;  cr ." Save demo1? " y/n [if]  turnkey run DEMO1  bye  [then]    \\ Demo 2                                                       variable SCREEN  screen off  #user  dup user CNT  1 floats +    ( u) dup 200 64 tcb UCOUNTING  \ task1 control block            ( u)     200 64 tcb DCOUNTING  \ task2 control block                                                                            : UPCOUNT ( -- )  ucounting activate  0e cnt f!                   begin  screen get  0 2 at-xy  cnt f@  fdup 0 10 f.r             1e f+  cnt f!  screen release  pause  again ;                                                                                 : DOWNCOUNT ( -- )  dcounting activate  0e cnt f!                 begin  screen get  15 2 at-xy  cnt f@  fdup 0 10 f.r            1e f-  cnt f!  screen release  pause  again ;                                                                                 : RUN ( -- )  /tasker  page ." 2 f/p tasks counting:"             upcount downcount multi  begin key? until key  drop single ;  cr ." Save demo2? " y/n [if]  turnkey run DEMO2  bye  [then]    