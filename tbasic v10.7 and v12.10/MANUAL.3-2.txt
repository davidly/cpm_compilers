* CLOSE [FILE(<0-63>),]<numeric expression>
Discontinues use (closes) a file which was previously
opened under the logical unit <integer expression>.
The optional FILE function need only be used to name the
file being closed when it is different than the last used.
Examples:   CLOSE FILE(35),3   CLOSE 5   CLOSE BINARY

* DATA <expression list>
Specifies data to be read by a "READ" statement.  Expressions
are allowed.  String constants must be enclosed by quotes.
Example:  DATA 1,3,5,7,X+Y,Z^2,"DON"+"TARBELL"

DEF FN<function name>(<variable list>)=<expression>
Defines a function.  The function name can be any legal variable
name.  The variable list is a list of dummy variables representing
the variables in the function call.  The value of the function is
determined by substituting the values of the variables into the
expression.  Functions may be nested to any depth, and string
functions are legal.  Any number of variables can be used.
Examples:   DEF FNCUBE(X)=X*X*X   DEF FNL3(S$)=LEFT$(S$,3)
	    DEF FNRMS(X,Y) = SQR(X^2+Y^2)

DIM <array name>(integer)[,<array name>(integer)]...
Allocates space for array variables.  Any number of dimensions
per array are allowed. The value of each expression gives the
maximum subscript permissible.  The smallest is 0.  If no "DIM"
statement is encountered before a reference to an array,
an error message is given.  Multiple arrays may be dimensioned.
Arrays are cleared to zero (numeric) or null (string).  Real
subscripts are allowed in array references, and if used, the
integer part of the subscript will be used for the reference.
Examples:  DIM PARTNO$(100),X(3,10),VERYLONGNAMESAREALLOWED(5)

* DROP <numeric expression>,<numeric expression>
Drops the assignment of the logical device selected by the first
expression to the physical device selected by the second expression.
Examples:   DROP 1,1     DROP LOGICAL,PHYSICAL    DROP PRINTD,TTY

END
Puts BASIC back into command mode without a message.  Normally
the last statement in a program, but not required.  Example:  END

ERASE [DISK(<0-3>),]<string expression>
Erases the file named <string expression> on the last accessed
disk drive, or, optionally, on the disk selected with DISK.
Examples:  ERASE "STARTREK.BAS"    ERASE DISK(1),"PROGRAM"

FOR <variable name> = <expr1> TO <expr2> [STEP <expr3>]
Execution sets <variable name> = <expr1>.  The program then proceeds
until a "NEXT" statement is encountered.  <expr3> (or 1 if STEP <expr3>
is omitted) is then added to <variable name>.  If <expr3> < 0 and
<variable name> >= <expr2>, or if <expr3> >0 and <variable name> <= <expr3>,
then the program continues with the statement following the "FOR" statement.
Otherwise, the program continues after the "NEXT" statement.
Examples:  FOR N=1 TO 5          FOR IND=START TO FINISH STEP INCR

* GET [FILE(<0-63>),][RECORD(<num. expr.>),]<variable list>
Read from the ASCII mass storage device into the variables
on <variable list>.  The data should have been previously
saved by a PUT statement.  An OPEN statement using the same
FILE number should have previously been executed.  No FILE
number is required if it is the same file as last accessed.
The RECORD function is only required for random files.
Examples:  GET FILE(2),DES$(N)   GET X   GET X,Y$,Z















				3-2









