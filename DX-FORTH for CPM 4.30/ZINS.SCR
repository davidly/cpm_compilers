\ ZINS - Information                                            ZINS performs automatic terminal installation for DX-Forth and  its applications when running Z-System (ZCPR3, NZCOM etc).                                                                      ZINS may be used as part of a general terminal install program  or included in DX-Forth applications to dynamically adjust to   the current TermCap in memory if Z-System is found present.                                                                     Note: Due to the Turbo Pascal compatible install system used by DX-Forth, certain Z-System cursor motion commands cannot be     properly emulated.  These exceptions are handled as follows -     '%>xy'  is treated as '%.'                                      '%D'    is treated as '%2' if the number of screen columns is           less than 100 or as '%3' otherwise.                   If the currently installed CPU speed is greater than 255 MHz    then no change to the CPU speed is made.                        \ Load block                                                    forth definitions decimal                                       application                                                                                                                     cr .( loading ZINS )   2 #screens 1- thru                       crhex                                                             \ Parse null-terminated string                                  label (Z1)  ( de=src hl=dst ; de=src' b=len )                     0FF b mvi  h push                                              1 $:  b inr  h inx  d ldax  d inx  a ora                         3 $ jz  char \ cpi  2 $ jnz  d ldax  d inx                     2 $:  a m mov  1 $ jmp                                          3 $:  h pop  b m mov  ret  end-code                                                                                            \ Place counted string                                          label (Z2)  ( de=src hl=dst b=len )                               b m mov  b inr                                                 1 $:  b dcr  rz  d ldax  d inx  h inx                            a m mov  1 $ jmp  end-code                                                                                                    \ (Z3)                                                          \ Parse cursor motion string                                    label (Z3)  ( de=src hl=dst ; de=scr' )                           0FF b mvi  a xra  019C sta  019D sta  \ zero offsets            016B sta  016C sta  h push            \ reset temp flags       1 $:  b inr  h inx                                              2 $:  d ldax  d inx  a ora  4 $ jz     \ end                     char % cpi  5 $ jz                    \ command follows         char \ cpi  3 $ jnz  d ldax  d inx    \ literal char follows   3 $:  a m mov  1 $ jmp                                          4 $:  h pop  b m mov                   \ insert count            016B lda  a ora  rz                   \ make col first if req.  019C lhld  l a mov  h l mov  a h mov  019C shld                 019E lhld  l a mov  h l mov  a h mov  019E shld  ret                                                                                                                                          \ (Z3)                                                           5 $:  d ldax  d inx            \ get next char                   char a cpi  6 $ jc            \ make uppercase                  char z 1+ cpi  6 $ jnc  20 sui                                 6 $:                                                             char + cpi  0B $ jz           \ binary + offset                 char . cpi  0D $ jz           \ binary                          char > cpi  0E $ jz           \ binary greater + offset         char R cpi  0F $ jz           \ output col first                char I cpi  10 $ jz           \ home is 1,1                     char N cpi  11 $ jz           \ insert a null                   char 2 cpi   8 $ jz           \ decimal 2 digits                char 3 cpi   7 $ jz           \ decimal 3 digits                char D cpi   3 $ jnz          \ decimal else unknown command                                                                                                                                  \ (Z3)                                                            0168 lda  64 cpi  8 $ jc          \ test if max columns < 100  7 $:  char 0 m mvi  h inx  b inr   \ insert '000'               8 $:  char 0 m mvi  h inx  b inr   \ insert '00'                      char 0 m mvi                                               a xra                             \ set decimal                9 $:  019B sta                                                   h push                                                          019F h lxi  016C lda              \ set row or col position     a ora  0A $ jz  h dcx             \ in cm template             0A $:  b m mov  m inr                                            1 a mvi  016C sta                 \ set flag                    h pop  1 $ jmp                                                                                                                                                                                                                                                \ (Z3)                                                           0B $:  h push  019D h lxi          \ binary + offset             016C lda  a ora  0C $ jz  h dcx                                0C $:  d ldax  d inx                                             m add  a m mov  h pop                                          0D $:  a xra  a m mov              \ binary                      a inr  9 $ jmp                    \ set mode                   0E $:  d inx  d inx  0D $ jmp      \ skip parameters            0F $:  016B sta  2 $ jmp           \ set col first flag         10 $:  h push  019C h lxi  m inr   \ home co-ords = 1,1          h inx  m inr  h pop  2 $ jmp                                   11 $:  a xra  3 $ jmp              \ insert null                 end-code                                                                                                                                                                                                                                                      \ ZINS                                                          \ Install terminal patch area with Z-System TermCap             code ZINS ( -- )                                                  0109 lhld  h a mov  l ora  7 $ jz     \ exit if bad zenv        b push                                \ save forth IP           0125 lda  a ora  1 $ jnz              \ set cpu speed only if   02B d lxi  d dad  m a mov  0124 sta  1 $:  \ current <= 255       6 d lxi  d dad  m a mov  0168 sta   \ number of columns                  h inx  m a mov  0169 sta   \ number of rows          04E d lxi  d dad  xchg  0153 h lxi    \ terminal name            0E b mvi  (z2) call  xchg  h inx  h inx                        014F b lxi    m a mov  a ora  2 $ jnz   \ up arrow               5 a mvi  2 $:  b stax                                          b inx  h inx  m a mov  a ora  3 $ jnz   \ down arrow            18 a mvi  3 $:  b stax                                                                                                        \ ZINS                                                            b inx  h inx  m a mov  a ora  4 $ jnz   \ right arrow            4 a mvi  4 $: b stax                                           b inx  h inx  m a mov  a ora  5 $ jnz   \ left arrow            13 a mvi  5 $: b stax                                           h inx  m a mov  01BA sta              \ delay after cls         h inx  m a mov  01A0 sta              \ delay after cm          h inx  m a mov  01CE sta              \ delay after cleol       h inx  xchg                                                     016B h lxi  (z1) call                 \ clear screen            d push                                                          016C d lxi                                                      01A8 h lxi  0 m mvi                   \ zero home               b a mov  6 cpi  6 $ jc                \ if cls too long         5 sui  a c mov  5 b mvi               \ split between ...                                                                     \ ZINS                                                            (z2) call                     \ home sequence and               c b mov  016C 5 + d lxi                                        6 $:  01A2 h lxi  (z2) call    \ cls sequence                    d pop                                                           018B h lxi  (z3) call         \ cursor motion                   01BC h lxi  (z1) call         \ clear-to-EOL                    01C2 h lxi  (z1) call         \ hilight                         01C8 h lxi  (z1) call         \ normal                          016B h lxi  (z1) call         \ video init                      017B h lxi  (z1) call         \ video exit                      01B4 h lxi  (z1) call         \ delete line                     01AE h lxi  (z1) call         \ insert line                     b pop                         \ restore forth IP               7 $:  next  end-code                                           decimal