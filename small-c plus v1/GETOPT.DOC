		GETOPT Library Documentation
 
GETOPT is a function used to process options from the command
line.
 
 
SYNOPSIS

	int getopt(argc, argv, optstring)
	int argc ;
	char **argv ;
	char *optstring ;

	extern char *optarg ;
	extern int optind ;

DESCRIPTION
	Getopt returns the next option letter in 'argv' that
	matches a letter in 'optstring'.  'Optstring' is a
	string of recognised option letters.  If a letter is
	followed by a colon the option is expected to have an
	argument which may or may not be separated from it by a
	white space.  'Optarg' is set to point to the start of
	the option argument on return from getopt.

	Getopt places in 'optind' the 'argv' index of the next
	argument to be processed.  Because 'optind' is external
	it is initialised to zero before the first call to
	getopt.

	When all the options have been processed (i.e. up to the
	first non-option argument), getopt returns EOF.  The
	special option -- may be used to delimit the end of the
	options.  EOF will be returned and -- will be skipped.

DIAGNOSTICS
	Getopt prints an error message on stderr and returns a
	question mark (?) when it encounters an option letter
	not included in 'optstring'.

EXAMPLE
	The following code fragment shows how one might process
	the arguments for a command which can take the mutually
	exclusive options 'a' and 'b', and the arguments 'f'
	and 'o', both of which require arguments:

	  main(argc,argv)
	  int argc ;
	  char **argv ;
	  {
	     int c ;
	     extern int optind ;
	     extern char *optarg ;
	     .
	     .
	     .
	     while ((c=getopt(argc,argv,"abf:o:))!= EOF) 
	        switch (c) {
	        case 'a' :
	           if (bflg)
	              errflg++ ;
	           else
	              aflg++ ;
	           break ;
	        case 'b' :
	           if (aflg)
	              ++errflg ;
	           else
	              bproc() ;
	           break ;
	        case 'f' :
	           ifile = optarg ;
	           break ;
	        case 'o' :
	           ofile = optarg ;
	           break ;
	        case '?' :
	        default :
	           ++errflg ;
	           break ;
	        }
	     if (errflg) {
	        fprintf(stderr, "Usage: ...") ;
	        exit() ;
	     }
	     for (; optind < argc; ++optind) {
	        .
	        .
	        .
	     }
	     .
	     .
	     .
	  }
 
AUTHOR
	Original version by Henry Spencer, from Usenet. 
	Translated for Small-C/Plus by Ronald M Yorston.
