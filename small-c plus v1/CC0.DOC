           Small-C/Plus Compiler Documentation
 
INTRODUCTION 
 
This compiler is based on the Small-C compiler written by Ron
Cain and published in Dr. Dobb's #45 (May '80).  The compiler
was modified to include floating point by James R. Van Zandt.
The floating point routines themselves were written by Neil
Colvin.  Further improvements, especially in control structures,
code optimisation, additional data types, structures and unions
were added by Ronald M. Yorston.  In part, these improvements
are based on the work of James E. Hendrix.  The companion
assembler ZMAC and linker ZLINK were written by Bruce Mallett.
The library reference resolver, ZRES, the library manager, ZLIB,
and the assembler optimiser, ZOPT, were written by Ron Yorston.

This compiler accepts a subset of standard C.  It requires a
Z-80 processor.  It reads C source code and produces Zilog
mnemonic assembly language output, with syntax matching the
assembler ZMAC supplied with it.  ZMAC produces a relocatable
file with the extension .OBJ.  One or more such relocatable
files can be linked with the companion program ZLINK.  All the
programs in the suite (CC0, ZMAC, ZLINK, ZRES, ZLIB, ZOPT) are
in the public domain.
 
For more about the C programming language, see  "The C
Programming Language" by B. W. Kernighan and D. M. Ritchie, 1978
(ISBN 0-13-110163-3).  For more information on the Small-C
compiler see "The Small-C Handbook" by James E. Hendrix, 1984
(ISBN 0-8359-7012-4).  Another useful book is "Dr Dobb's
Toolbook of C", 1986 (ISBN 0-89303-615-3). 
 
 
DATA TYPES
 
The data types are...
 
char c;           character 
char *c;          pointer to character
char **c;         pointer to pointer to character
char c();         function returning character
char *c();        function returning pointer to character
char c[3];        character array 
char *c[3];       array of pointers to character

int i;            16 bit integer 
int *i;           pointer to integer 
int **i;          pointer to pointer to integer
int i();          function returning integer 
int *i();         function returning pointer to integer
int i[4];         integer array 
int *i[4];        array of pointers to integer
int (*i)();       pointer to function returning integer

double d;         48 bit floating point
double *d;        pointer to double
double **d;       pointer to pointer to double
double d();       function returning double
double *d();      function returning pointer to double
double d[5];      array of doubles
double *d[5];     array of pointers to double

struct st s;      structure with tag st
struct st *s;     pointer to structure with tag st
struct st **s;    pointer to pointer to structure
struct st *s();   function returning pointer to structure
struct st s[5];   array of structures with tag st
struct st *s[5];  array of pointers to structure

union un u;       union with tag un
union un *u;      pointer to union with tag un
union un **u;     pointer to pointer to union with tag un
union un *u();    function returning pointer to union
union un u[5];    array of union with tag un
union un *u[5];   array of pointers to union with tag un
 
Characters are 8-bit signed integers with values in the range -128
to 127.  Integers are signed integers with values between -32768
and 32767.  Pointers contain the addresses of data elements and
are treated as unsigned integers when compared.

Storage classes (other than extern), multidimensional arrays,
and more complex types like "int *(*i)()" (pointer to function
returning pointer to int) are not included.  Although multi-
dimensional arrays are not allowed, it is possible to use arrays
of pointers to produce a similar effect.

Structures may be declared using the syntax:

	struct st {
		int x ;
		char c[12] ;
		struct other s ;
		struct st *st_pointer ;
	} x, *y, z[5] ;

The structure tag is compulsory.  Structure declarations may be
nested, although the members of the nested structures then share
the same name space.  Structures may not contain instances of
themselves, but can contain pointers to instances of themselves.
The members of a structure must be declared the first time the
structure is mentioned.   Structure passing and assignment are
not supported.  This means that the only legal occurrence of a
structure in a function argument list is as a pointer. 
Structure tags, structure members and ordinary variables have
separate name spaces.  Unions are treated as a special form of
structure, so all the same rules and restrictions apply.

 
PRIMARIES
 
	array[expression] 
	function(arg1,arg2,...,argn) 
	structure.member
	st_pointer->member
	constant 
		decimal integer 
		hexadecimal integer (0xfe, 0X12CD, 0x04A)
		decimal floating point (1.0, 2., .3, 340.2e-8)
		quoted string    ("sample string") 
		primed character ('a'  or  'Z') 
		sizeof()
	local variable 
	global variable 
 
Each variable must be declared before it is used.  Variables
declared outside a function are global.  Local variables may be
declared at the start of any compound statement, except the
compound statement of a switch statement.  The scope of local
variables is restricted to the compound statement or function in
which they are declared.  The extern keyword may be used to
declare external variables and functions.  Only the first eight
characters of variable and function names are significant.

The following global objects may be initialised when they are
declared:  chars, ints, pointers to char, arrays of char, arrays
of int, arrays of pointer to char, structs, pointers to struct
and arrays of struct.  Doubles may not be initialised.  Some
examples of initialisation:

	char c = 'a' ;
	int i = 0 ;
	char *message = "Hello world\n" ;
	char bye[] = "Goodbye" ;
	int x[7] = { 0, 1, 2, 3, 4, 5, 6 } ;
	char *mon[] = { "jan", "feb", "mar", 0 } ;

	struct st { char c; int x; char *cp } ;
	struct st st1 = { 'q', 23, "a string"} ;
	struct st *st2 = { 'r', 42, "another string"} ;
	struct st st3[] = {
			{'a', 1, "a"},
			{'b', 2, "b"} } ;

Arrays being initialised may have their dimension specified, in
which case any uninitialised entries are set to zero. 
Alternatively, the array dimension may be left blank, in which
case the size of the array is determined by the number of
initialisers present.  Uninitialised global variables are set to
zero.  Local variables cannot be initialised and their initial
contents are undefined.

Character pointers may only be initialised to a string constant
or zero.  The only structure members which can be initialised
are chars, ints and pointers to char.  A structure containing
any other type of member cannot be initialised.

Within quotes or single inverted commas the escape sequences
'\b', '\t', '\l', '\f' and '\n' may be used to represent 8, 9,
10, 12 and 13 respectively.  Note that '\n' represents a
carriage return, not a line feed as is more often the case.  No
problems will arise if '\n' is used where a newline is required.
An arbitrary character can be represented by a three digit octal
sequence: '\ooo'.  Any other character following a backslash is
removed of its special meaning, so a double quote may be
included in a quoted string by saying '\"', and a backslash by
saying '\\'.

The value of a quoted string is a pointer to the string,
terminated by a null byte, somewhere in memory.

The sizeof() operator returns the size of an object in bytes. 
It may only take arguments of the form "int", "char", "double"
or "struct st".  Variable names are not acceptable.
 
  
UNARY INTEGER OPERATORS
 
	!	logical not
	~	ones complement
	-	minus 
	*	indirection 
	&	address of 
	++	increment, either prefix or suffix 
	--	decrement, either prefix or suffix 
 
 
BINARY INTEGER OPERATORS
 
	+	addition 
	-	subtraction 
	*	multiplication 
	/	division 
	%	mod, remainder from division 
	|	inclusive or 
	^	exclusive or 
	&	logical and 
	<<	left shift 
	>>	arithmetic right shift 
	&&	logical and
	||	logical or
	=	assignment 
 
 
UNARY DOUBLE OPERATORS
 
	-	minus 
	*	indirection
	&	address of
 
 
BINARY DOUBLE OPERATORS
 
	+	add 
	-	subtract 
	*	multiply 
	/	divide 
	=	assignment 
 

RELATIONAL OPERATORS

	==	equal 
	!=	not equal 
	<	less than 
	<=	less than or equal 
	>	greater than 
	>=	greater than or equal 


ASSIGNMENT OPERATORS

	INTEGER

		+=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=

	DOUBLE

		+=, -=, *=, /=


CONDITIONAL OPERATOR

	?:	conditional operator
 

Conversion between floating point and integer is automatic for
assignment and for the expression returned by a function.
Conversion from integer variables to floating point is
automatic for the arguments of any of the floating point
operators.  Otherwise, the routines "float(jj)" and "ifix(yy)"
(as in FORTRAN) may be used.  Integer constants may not be used
in floating point expressions; the compiler warns of this
situation.  The arguments of integer-only operators are checked
to ensure they are integers.  There is no type checking for the
actual parameters of function calls.

When adding an integer to a pointer, the increment is scaled by
the size of the object pointed to.  Thus, adding n to a pointer
makes it point to the nth object along in memory, regardless of
the size of the object involved.   When two pointers (to objects
of the same type) are subtracted the difference is scaled down
by the size of the object pointed to.  The result only makes
sense if the pointers refer to the same array:  it then gives
the number of elements between the pointers.

The comma operator may be used to separate expressions in an
expression list.  The expressions in the list are evaluated left
to right and the value returned is that of the rightmost
expression.


TYPES OF STATEMENT
 
expression;			Expression statement

if(expression) statement;	Statement executed if expression
				is non-zero

if(expression) statement;	Statement executed if expression
				is non-zero
else statement;			Statement executed if expression
				is zero

while(expression)statement;	Statement executed while expression
				is non-zero.  (It is possible for
				the statement not to be executed
				at all.)

do statement while(expression);	Do statement until expression is
				false.  The test is at the end of
				the loop. 
  
for(expr1;expr2;expr3)		expr1 initialises a variable.
  statement ;			expr2 tests a condition involving
				the variable.  expr3 increments or
				otherwise alters the variable. The
				statement is executed until expr2
				becomes false.

switch(expression) {		Different case statements are
case value1:statement;		executed depending on the value of
case value2:statement;		the switch expression.  Most case
 etc.				statements end with a break to avoid
default:statement;		the other statements below.  The
}				switch expression must be an
				integer and the case values must
				be integer constant expressions.

break;				Control transferred from the
				innermost loop or switch

continue;			Return control to the loop-
				continuation portion of the
				enclosing while, do or for loop

return;				Return from function

return expression;		Return from function with value
				given by expression
  
 ;				Null statement
   
{statement;statement;		Compound statement which may be used
 statement;..statement;}	anywhere instead of a simple
				statement.
 

If functions return anything other than an integer, they must be
declared before use in each compilation.  Otherwise, functions
are automatically imported and exported.  Names of functions and
global variables (i.e., those declared outside function
definitions) are always global as far as the linker is
concerned, and may not overlap.  (i.e. there are no static
functions or variables.)

 
COMMAND LINE ARGUMENTS

The function 'main' can start with:

	main(argc,argv)
	int argc ;
	char **argv ;
	{

Argc is an integer equal to the number of command line arguments
and will be equal to one if the command line consisted only of a
command.  Argv is an array of pointers to character strings
which are initialised with the command line arguments.  Argv[0]
would contain the command name, but CP/M does not allow access
to that information, so it points to a null string instead.
Argv[1] contains a pointer to the first argument, etc.


EMBEDDED COMPILER COMMANDS
 
The following pseudo-preprocessor directives are recognised:

	#define name string

'name' is replaced by 'string' hereafter.  Macro arguments are
not permitted.

	#undef name

The definition for the macro 'name' is removed from the macro
table.

	#ifdef name
	#ifndef name
	#else
	#endif

The above directives allow conditional compilation.  If 'name'
is defined, code between #ifdef name and #else or #endif is
compiled.  If 'name' is not defined the code between #ifdef name
and #else or #endif is not compiled.  The #else directive
toggles whether or not code is compiled.  The #endif directive
terminates an #ifdef or #ifndef block.  The #ifndef directive
works in the opposite sense to #ifdef, compiling code if 'name'
is not defined, and ignoring it if it is.

 
	#include filename 
 
compiler gets source code from another file (can't be nested) 
 
	#asm 
	... 
	... 
	#endasm 
 
code between these is passed directly to the assembler.  The
only preprocessor directives which apply between #asm and
#endasm are the conditional compilation directives.  This allows
conditional assembly based on the value of a #defined constant.

Comments are written: /* comment */
Comments may not be nested.
 
 
USING THE COMPILER
 
When the compiler is run, it reads one or more C source files
and produces one assembly language file.  Assembly language
files are separately assembled by ZMAC, references to library
routines are resolved by ZRES, and then a single executable file
is built by ZLINK.

The format of the compiler command line is:
 
	cc0 [options] file [file file...]
 
Each option is a minus sign followed by a letter:
 
	-C	include the C source code as comments in the
		compiler-generated assembly code.

	-Dname[=value]
		define the symbolic value 'name'.
 
	-E	pause after an error is encountered.
 
	-M	none of the named files contains main().
 
	-T	enable walkback trace on calls to err().

	-Uname	undefine the macro 'name'.

The -D options makes it possible to define symbolic values at
compile time.  For example, you could define the symbol DEBUG to
include debugging code in the compiled program, using the
conditional compilation features of the preprocessor.  If the
'value' is omitted the symbol takes the value 1.  Note that
because CP/M translates the command line into upper case it is
only possible to define upper case symbols and values.  The
symbols CPM, Z80, PCW and SMALL_C are predefined.
 
The -M option stops the compiler from producing its standard
header (initializing the stack pointer, for example), which is
only required in the first object module to be linked.  The
header does not include an ORG 100H directive, since ZLINK
automatically starts programs at 100H.  As a result, forgetting
the -M option will lengthen your program by a few bytes but
cause no other harm. 
 
The -T option compiles code into each function which will allow
a "walkback trace" to be printed when err() is called.  The
walkback trace lists all the functions that have been called but
which have not yet returned (recursive calls lead to multiple
listings).

The -U option removes a macro definition from the macro table. 
It can be used to undefine the predefined symbols CPM, Z80, PCW
and SMALL_C.
 
Options and files are separated by spaces, and options must
precede file names.  Only file names (optionally preceded by a
disk name) should be given:  the compiler automatically adds the
extension ".C".  The output file is given the same name (and is
put onto the same disk) as the first input file, but with the
extension ".ASM".
 
Each assembly language file is assembled as follows:
 
	zmac alpha=alpha
 
If extensions are not specified, as here, ZMAC uses ".ASM" for
its input file and ".OBJ" for its output file.
 
References in the ".OBJ" files to routines in the library are
resolved using ZRES:

	zres b: clib alpha beta

This command will scan the library clib to resolve references
contained in the files ALPHA.OBJ and BETA.OBJ.  A submit file
will be generated to perform the necessary linkage.  The
standard run-time routines in IOLIB.OBJ is always included, and
any other library routines are copied into the temporary file
CLIB.OBJ.  The submit file also changes to drive B: and copies
the resulting executable there.

The object files are linked as follows:
 
	zlink alpha,alpha=alpha,beta,iolib,clib
 
The first name is for the output file.  By default, it is given
the extension ".COM".  The second name is for the map file
(default extension ".MAP") which gives the values of all the
global symbols.  ZLINK will always tell you how many global
symbols were undefined, but won't tell you what the undefined
symbols were unless you ask for a map file.  This does not
normally matter as ZRES will list all unresolved references.

All the names to the right of the '=' are input files, with the
default extension ".OBJ".  The first input file must have been
compiled WITHOUT the -M option.  Ordinarily, it will be the one
with main().  The other files can be mentioned in any order.
 
 
LIBRARY FILES 
 
Several different groups of library files are included: 
 
CTYPE		Character classification functions.
FLOAT		Floating point arithmetic routines. 
GETOPT		Processing of command line options.
IOLIB		Basic input/output and integer arithmetic.
MATH 		Mathematical routines.
PLOT		Plotting routines for the Amstrad PCW
PRINTF		Generic functions for output.
PRINTF1		Output routine _printf(), integer only. 
PRINTF2		Output routine _printf() with floating point.
SCANF		Generic input routines.
SCANF1		Input routines for integers only.
SCANF2		Input routines for integers and floating point.
STRING		String handling routines.
WILDCARD	Expand wildcard filenames.


The IOLIB.OBJ library must be included in every executable.
The rest of the library is kept in the file CLIB.LIB and an
index to the library is kept in the file CLIB.IDX.  These files
are built using the utility ZLIB.

Library functions should normally be declared to the compiler by
including the appropriate header file.  For example, if floating
point operations are needed, the source file should contain:
 
	#include <stdio.h>
	#include "float.h"

	...			(rest of source code) 

The header files are: stdio.h, string.h, math.h, ctype.h, plot.h
and float.h.
 
Compilation, assembly, and linking would consist of:
 
	A>cc0 alpha
	A>zmac alpha=alpha 
	A>zres a: clib alpha
	A>submit clib

An optional stage in this process is to optimise the assembly
code produced by the compiler.  This is achieved by calling the
optimiser, ZOPT.COM:
 
	A>cc0 alpha
	A>zopt alpha
	A>zmac alpha=alpha 
	A>zlink a: clib alpha
	A>submit clib

You may prefer to omit the optimisation until your program has
been debugged.  This will save some time during development.

 
SAMPLE COMPILATION
 
    M>cc0 test
	

    * * *  Small-C/Plus  Version 1.00  * * *

           Cain, Van Zandt, Hendrix, Yorston

           25th February 1988


    TEST.c				<file names echoed>

    #include <stdio.h>			<include files echoed>
    #end include
    #include <math.h>
    #end include
    #include "float.h"
    #end include
    ====== main()			<function names echoed>
    ====== out()
    ====== alpha()
    ====== beta()
    ====== gamma()
    ====== putnum()
    ====== outf()

    Minimum bytes free: 4225
    Symbol table usage: 38
    There were 0 errors in compilation.

    M>zmac test=test
    SSD RELOCATING  (AND EVENTUALLY MACRO) Z80 ASSEMBLER VER 1.07

        0  ERRORS

    M>zres b: clib test
    bytes free: 13301 
    Copying FLOAT			<loading from library>
    Copying GETS
    Copying PRINTF
    Copying IFIX
    Copying SQRT
    Copying FLOOR
    Copying QFLOAT
    Copying PRINTF2
    Copying UTOI

    Symbol table   152/700		<ZRES statistics>
    Library table  137/500
    Index table    453/600

    M>submit clib
    M>zlink TEST=TEST,IOLIB,CLIB	<from submit file>
    SSD LINK EDITOR
          0 UNDEFINED SYMBOL(S).
    M>era clib.obj
    M>B:
    B>pip TEST.COM=m:
    B>era m:clib.sub
 
 
PERFORMANCE
 
The program test.c on this disk (with 156 lines) was compiled in
25.0 sec on a 4 MHz Z-80 (with interrupts turned off and working
from RAM disk).  This gives a compilation speed of approximately
6 lines/sec.
 
The following floating point benchmark (from Dr. Dobb's
Journal, Mar 84) finished in 637 seconds on a 4 MHz Z-80, with
the result 2500.01047:
 
	#include <stdio.h>
	#include <math.h>
	#include "float.h"
	int i;
	double a;
	main()
	{	a=1.0; i=1;
		printf("starting\n");
		while(i++<2500)
			{a=tan(atan(exp(log(sqrt(a*a)))))+1.0;}
		printf("Result is %20.12f ",a);
	}

A Small-C/Plus translation of the whetstone benchmark produced a
result of 2400 whetstones/second.
 
 
INTERNAL DOCUMENTATION 
 
This is a recursive descent, one pass compiler producing
assembly language.  The two major changes that have been made
to speed it up relative to Ron Cain's original compiler are a
hash coded symbol table and 1K disk buffers.  Also, the compiler
source makes use of many of the new features which have been
added during development.  For example, symnbol table entries
are now represented as structures.
 
Global symbols defined in a C program are prefixed by 'Q' so
they do not conflict with any global symbols in libraries.
 
A compiled program has the following layout...
 
	100H to _end-1		program & data
	_end to *heaptop	heap
	*heaptop to *SP-1	unused
	*SP to *(0006)		stack
 
The symbol _end is defined by ZLINK at link time, and points to
the first byte above program and data.  The variable heaptop
(initialized to _end) always points to the first byte above the
heap.  The stack pointer register SP is initialized to the
first location above user memory (pointed to by the word at
0006). The variable names _end and heaptop are visible only to
assembly language programs, since they do not begin with Q's.
 
Assembly language functions can be called by C programs.  A C
function evaluates each of its arguments (left to right), pushes
them onto the stack, then calls the named function.  Therefore,
the assembly language function should expect that the top word
on the stack is the return address, the next word is the last
argument, etc.  If the function is to return an integer or
character value, it should be left in the HL register.  Double
values should be left in the 6 byte area starting at FA.

The compiler will quite happily compile itself, though it is now
so big that it must be optimised if it is to fit in memory.  In
addition, I have successfully ported it to a Unix system. 
(That's why there are all the #ifdef SMALL_C's.)  Note that the
#asm preprocessor directives should be removed, as the Unix
preprocessor doesn't like them.  The resulting cross-compiler
cannot handle floating point constants.  This is because the
Small-C/Plus compiler assumes that the Z80 floating point
routines are being used, while in a Unix environment the f.p.
routines appropriate to the host system will be linked in.
 
 
WARNINGS 
 
In addition to the limitations mentioned above, the user should
be aware of the following... 
 
Functions are assumed to return an integer unless the compiler
is told otherwise.  In making an explicit declaration of the
type of object a function returns, you have to use two lines...
 
	double frodo(); 
	frodo(x,y,z) int x; double y,z; 
 
You can't combine them, as in standard C... 
 
	double frodo(x,y,z) ...		/* not accepted */ 
 
The declaration "double frodo();" must appear before any use of
the function, or the compiler will assume while generating the
calling code that the function returns an integer. 
 
The floating point routines in the FLOAT library (though none
of the code produced by the compiler) use several of the undoc-
umented Z-80 op codes, so they may not work on some processors.
FLOAT also uses the alternate register set. 
 
The floating point routines do not meet the proposed IEEE
standard. 


Ronald M Yorston
1 Church Terrace
Lower Field Road
Reading
RG1 6AS

22nd May 1988
