		IOLIB Library Documentation 
 
IOLIB defines all the arithmetic operations, and the following
I/O, heap management, and error reporting functions:
 
 
FUNCTIONS
 
cpm(bc,de) int bc,de;
	The registers BC and DE are set to the values of the
	corresponding arguments, and a BDOS service request
	(CALL to 5) is made.  The value returned is the contents
	of A (sign extended).

getchar()
	Echoes and returns one character from the standard
	input, which is initially the keyboard but can be 
	redirected from the command line.

putchar(c) char c;
	displays one character on the standard output, which is
	initially the console but can be redirected from the
	command line.  Adds LF after CR.  Returns c or EOF on
	error.

gets(buf) char buf[80];
	Gets a null-terminated string from the standard input.
	If I/O has not been redirected, the string comes from
	the keyboard and standard CP/M editing is permitted.  The
	maximum length of the string is fixed at 80 characters.
	The buffer buf should not be on the stack.

fgets(s,n,fd) char *s; int n; FILE *fd;
	Reads a line of input from the file fd into the
	character array s.  The newline is read and placed in
	the string.  The array is terminated with a null
	character.  At most n-1 characters will be read.  Fgets
	normally returns s, but returns 0 on end of file.

puts(s) char *s;
	Displays a null-terminated string on the standard
	output, using putchar().  Note that, unlike the Unix
	version, puts() does not add anewline at the end of the
	output.

fputs(s,fd) char *s, FILE *fd;
	Writes the null-terminated string pointed to by s to the
	file pointed to by fd.  Returns number of characters
	written, or -1 on error.

fopen(name,mode) char *name,*mode;
	Opens file "name".  "mode" is a pointer to a single 
	character (either upper or lower case): "r" for read
	access, "w" for write access, and "a" for appending to 
	an existing file.  fopen returns a file pointer (FILE *)
	which must be used for subsequent file accesses. 
	For example...
 
	fd=fopen("frodo.c","r")	opens FRODO.C for reading
	character=getc(fd)	gets a character from FRODO.C
	fd=fopen("sam.c","W")	opens SAM.C for writing
	putc(character,fd)	writes a character to SAM.C
 
	Up to five files may be open at once. (If more are
	needed, change NBUFS in IOLIB.C, compile, and assemble.)

fclose(fd) FILE *fd;
	Closes the file with file pointer fd.

getc(fd) FILE *fd;
	Returns the next character from the file (not sign
	extended), or -1 at end of file.  Line feeds are
	discarded, and control Z (1AH) signals end of file. 

getb(fd) FILE *fd;
	Return next byte from file (not sign extended), without
	regard to its value, or -1 if at end of file.  (Use this
	one to read a COM file.) 

putc(c,fd) char c; FILE *fd;
	Write character c to a file.  If it is a carriage
	return (\n), write a line feed as well.  Returns c.

putb(c,fd) char c; FILE *fd;
	Write byte c to a file, without special handling of
	carriage return. 

fflush(fd) FILE *fd;
	Flush buffer for file fd (which must be an output
	file) to disk.  Called automatically by fclose().

unlink(c) char *c;
	Unlink (delete) the file whose name is pointed to by c. 
	Returns 0 on success and -1 on failure.

abs(x) int x;
	Returns the absolute value of x.
 
alloc(n) int n;
	Returns a pointer to a block of n bytes of memory
	(no error checking).

free(ptr) char *ptr;
	ptr should be one of the pointers returned by alloc.
	That block AND ALL BLOCKS ALLOCATED SINCE THEN are
	returned to the heap.	

avail()
	Returns the number of bytes of memory available for
	the heap AND THE STACK.  If you allocate all of it
	and write over the stack, you will cause trouble.
	The safe way to get a big buffer is as follows:
		size=avail()-300;
		where=alloc(size);
			/* initialize if needed... */
		i=0; while(i<size) {where[i]=0;}
 
err(s) char *s;
	Prints "\nERROR" and the message pointed to by s on
	the console, and (if enabled during compilation)
	performs a walkback trace. For example, fopen uses
	the call:
		err("OUT OF DISK BUFFERS");
	The walkback trace lists the functions that have
	been called but have not yet returned, with the
	most recently called function first. Any functions
	compiled without the trace option (and all assembly
	language functions) simply don't appear in the list.
 
 
COMMAND LINE PROCESSING

IOLIB includes code to give the user access to the command
line and optionally redirects the standard input and/or output.
This code is called automatically when the program starts.
 
_setargs() parses the command line, which is a series of items
separated by one or more spaces.  A '<' followed by a file
name will redirect the standard input (used by getchar() and
gets()) to that file.  A '>' followed by a file name will
similarly redirect the standard output (used by putchar() and
puts()).  If the file exists, it will be silently deleted.  '>>'
followed by a file name will also redirect the standard output,
but if the file already exists then the new characters will be
appended to the existing data.  In any of the above cases, one
or more spaces can appear before the file name.  Items other
than the above are saved for later access as command line
arguments.  As far as argc and argv are concerned, I/O
redirection commands are invisible.  Regardless of I/O
redirection, err() will always display its message and walkback
trace (if any) on the console, putc(c,1) or putc(c,stderr) will
always send the character c to the console, and getc(0) will
always get a character from the keyboard.
 

POTENTIAL IMPROVEMENTS
	alloc() and free() should permit blocks of memory to be
	allocated and freed in any order.  (But see file malloc.c
	on this disk.)
