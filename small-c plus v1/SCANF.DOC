		SCANF Library Documentation
 
SCANF2 supplies formatted input like that described by
Kernighan and Ritchie.  SCANF1 is identical except that formats
'f' and 'e' are missing.  Thus, SCANF2 requires FLOAT while
SCANF1 does not.  The generic functions which the user actually
calls are provided in the library SCANF, thus a given program
using scanf will require SCANF and one of SCANF1 or SCANF2 .
 
 
FUNCTIONS
 
scanf(controlstring, arg, arg, ...)
	scanf reads a series of white-space-separated fields
	from the standard input, converts them to internal
	format according to a specification in the 'control-
	string', and stores them at the locations indicated by
	the arguments.  It returns a count of the number of
	fields converted or EOF if no fields were processed
	because end-of-file was reached.

	'controlstring' can contain any of the following format
	codes to tell scanf how to treat each field: 

		%d	decimal integer 
		%u	unsigned decimal integer 
		%x	hexadecimal integer (ignore 0x or 0X)
		%o	octal integer
		%c	character (no skip over white space)
		%s	null-terminated ASCII string 
		%e	floating point conversion for double 
		%f	floating point conversion for double

	For each format code, there is an 'arg' - a pointer to
	an object of that type.  Between the '%' and the format
	code letter an asterisk and/or a decimal integer
	constant may appear.  An asterisk indicates that the
	corresponding field in the input should be skipped.  No
	'arg' is necessary in this case.  A number indicates the
	maximum field width in characters.  Conversion
	terminates either when the given number of characters is
	exhausted or when a white space character is found.

	Example:

		int i ;
		double x ;
		char name[50] ;
		scanf("%2d %f %*d %2s", &i, &x, name);

	with input

		56789 0123 45a72

	will assign 56 to i, assign 789.0 to x, skip over 0123,
	and place the string 45 in name.  The next call to any
	input routine will start searching at the letter a.

fscanf(unit, controlstring, arg, arg,...)
	Provides functions similar to scanf, but with input
	taken from the file associated with 'unit'.  fscanf
	returns the number of fields successfully converted.

sscanf(string, controlstring, arg, arg,...)
	Provides functions similar to scanf, but with input
	taken from string pointed to by the character pointer
	'string'.  sscanf returns the number of fields
	successfully converted.

atof(str) char *str;
	converts from ASCII to floating point, returns the
	double value. The general input format is
	[-][integer][.[fraction]][e[-]exponent], where things
	in brackets are optional (except that either an integer
	or a fractional part must be present).
	Examples				Values
	1   1.   1.0				1.
	.1   1.e-1   10.e-2   .01e1		0.1
	Conversion stops with the first character that doesn't
	match the above format. 
 
 
 
AUTHOR
	J. E. Hendrix for the original routines, with some
	modifications and generalisations by R M Yorston.
 
 
INTERNAL DOCUMENTATION 
 
The routines seen by the user (scanf, fscanf, sscanf) are in the
library SCANF.  The routine which does all the hard work,
_scanf, is in either SCANF1 or SCANF2 depending on whether
floating point output is required or not.
