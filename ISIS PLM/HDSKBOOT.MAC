	.Z80	aseg; The sectors of a track are read in the following order:; first even sectors, then odd sectors in ascending order; 0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,; 1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31; T0[S8 - S31], T1, T2, T3, T4, T5[S0 - S23];    28       + 32+ 32+ 32+ 32+ 28 = 184 sectors = 23552 byte (5C00); loads sectors to 0 .. 5bff and jumps to 0 when donetrue		equ	0ffffhfalse		equ	not truehdskReset	equ	1		; command to reset controllerhdskRead	equ	2		; read commandhdskport	equ	0fdh		; control port for simulated hard disksimhreset	equ	14		; SIMH reset commandstoptimer	equ	22		; SIMH stop timer interruptsetbankselect	equ	12		; SIMH command to set memory bankhasbankedmemory	equ	18		; SIMH command to check for banked memorysimhport	equ	0feh		; SIMH portbootorg		equ	0000		; jump to this address after loadingbootstart	equ	5c00h		; boot code resides herebootSize	equ	bootend - bootstartrom		equ	0ff00h		; address of Altair bootstrap loader in ROMsectorsPerTrack	equ	32sectorLength	equ	128firstSector	equ	8		; first sector to loadfirstTrack	equ	0		; from this trackfirstDiskAddr	equ	256*firstTrack+firstSectorlastSector	equ	23		; last sector to loadlastTrack	equ	5		; from this track; items to be checked resp. configuredbootdr1		equ	rom+0037h	; taken from dskboot (offset unitnooffset1)ndisks		equ	8		; number of Altair (floppy) disksincludeTestCode	equ	falsesectpos	macro	sector,var		;; compute index of sector in assign to var	if	(sector and 1) eq 0	;; sector is evenvar	equ	(sector shr 1)		;; index is sector/2	else				;; sector is oddvar	equ	(sectorsPerTrack shr 1)+(sector shr 1)	;; index has offset	endif	endm	if	lastTrack gt (firstTrack+1)	; get number of complete tracksfullTrk	equ	lastTrack-firstTrack-1	; are there any?	elsefullTrk	equ	0			; no	endif	sectpos	firstSector,fpos	sectpos	lastSector,lpossectors	equ	sectorsPerTrack-fpos+sectorsPerTrack*fullTrk+lpos+1	org	100h	if	includeTestCode		; for testing purposes	ld	hl,bootstart		; this is where boot code should reside	ld	de,dest			; here is boot code currently	ld	c,bootSize		; length of boot codemove:	ld	a,(de)			; get byte from source	ld	(hl),a			; put byte to destination	inc	de			; next source address	inc	hl			; next destination address	dec	c			; decrement loop counter	jp	nz,move			; continue if not done	jp	bootstart		; otherwise jump to boot codedest	equ	$	endif	.phase	bootstart	di	ld	b,128			; sending SIMHRESET 128 times guarantees reset	ld	a,simhreset		; reset commandreset1:	out	(simhport),a		; reset SIMH interface	dec	b	jp	nz,reset1		; again	ld	a,stoptimer		; stop timer interrupts command	out	(simhport),a		; send it	ld	a,hasbankedmemory	; check for banked memory support	out	(simhport),a		; send command	in	a,(simhport)		; receive result	or	a			; check for <> 0	jp	z,reset2		; no banked memory support detected	ld	a,setbankselect		; next command is select bank	out	(simhport),a		; send it	xor	a			; bank for boot is 0	out	(simhport),a		; reset bank to 0reset2:	ld	b,32			; reset hard disk controller	ld	a,hdskReset		; by issuing the reset command 32 timesreset3:	out	(hdskPort),a	dec	b	jp	nz,reset3		; post condition is <B> := 0	ld	de,firstDiskAddr	; <D> := 0 (Track), <E> := 8 (Sector)	ld	hl,bootorg		; DMA address	ld	c,sectors		; <C> is loop counteragain:	ld	a,hdskRead	out	(hdskport),a		; send read command to hard disk port	if	includeTestCode		; for testing purposes	ld	a,0			; always use disk 0	else	ld	a,(bootdr1)		; in real life take disk number from boot ROM	sub	ndisks			; correct for Altair disks	endif	out	(hdskport),a		; send drive to boot from to hard disk port	ld	a,e	out	(hdskport),a		; send sector	ld	a,d	out	(hdskport),a		; send lower byte of track	xor	a	out	(hdskport),a		; send higher byte of track which is always 0	ld	a,l	out	(hdskport),a		; send lower byte of DMA address	ld	a,h	out	(hdskport),a		; send upper byte of DMA address	in	a,(hdskport)		; perform operation and get result	or	a	jp	z,cont1			; continue if no error	halt				; halt otherwisecont1:	ld	a,c			; save <C> in <A>	ld	c,sectorLength		; <BC> is now 128 since <B> always zero	add	hl,bc			; get next DMA address	ld	c,a			; restore <C> from <A>	dec	c			; decrement loop counter	jp	nz,cont2	ei	jp	bootorg			; done, jump to loaded codecont2:	inc	e			; Sector := Sector + 2	inc	e	ld	a,e	cp	sectorsPerTrack		; is new Sector equal to 32	jp	z,switch		; yes, need to go to odd sectors	cp	sectorsPerTrack+1	; is new Sector equal to 33	jp	nz,again		; no, proceed with read	ld	e,0			; Sector := 0	inc	d			; Track := Track + 1	jp	again			; proceed with readswitch:	ld	e,1			; Sector := 1	jp	again			; proceed with readbootend	equ	$	.dephase	end