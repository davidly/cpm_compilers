
**********************************************************
*	BD Software C Compiler				 *
*	On_Line Hanbook					 *
*	written by 	Leor Zolman,			 *
*			BD Software			 *
*			5/9/79, 8/25/79			 *
*							 *
**********************************************************


	Welcome to the world of Structured High-Level
Microcomputer Programming!! This document is intended as
a quick guide to using the BD C Compiler package. 

	====================================================
	Note to TRS-80 owners and other users having an
	upper-case only console I/O device: Two programs
	have recently been added to the package, CONVERT.C
	and CC0T.C, to allow you to represent those characters
	not normally available on your keyboards. See the
	last part of this file for details.
	====================================================

	The main components of C are: 4 executable programs,
a standard library file, and one skeleton run-time subroutine
file.

A description of each follows:

CC1:	Because C loads the entire source file into memory
	in one shot, the compilation is broken up into two
	phases (not "passes", strictly; The two phases end
	up taking about 8 passes to actually implement),
	maximizing the amount of memory available for the
	source file.
	CC1, the first half of the compiler, accepts a C
	source file with any filename and extension (say,
	"foo.c") and writes out a temporary file (with the
	same filename and extension ".CCI") containg a symbol
	table and an encoded form of the source code.

	The file extension ".C" is NOT assumed for the
	input file, so saying "FOO" for "FOO.C" would not
	work.

	If the source file name is preceded by a disk
	designation, then the input is taken from the specified
	disk and the ouput is also written to that disk.

	If any errors are detected during CC1, the output
	file will not be written.

	In addition to the name of the source file, a few
	options may also be specified on the command line
	by preceding the option list with a dash (-):

	s 	causes undeclared identifiers to be implicitly
	        declared as integer variables, wherever possible.

	hex digit (4-f)  sets symbol table size to the 
			   specified value (in K bytes);
			   default size is 8.

	For example,
		A>cc1 foobar.c -s6
	supresses errors for undefined variables and sets 
	symbol table size to 6K bytes;
		A>cc1 zot.c -e
	sets symbol table size to 14K bytes.
	Note that the option list must contain no blanks.
		A>cc1 b:td.c
	takes the source file from disk B and writes the .CCI
	file to disk B (regardless of what the currently logged
	disk is.)

	On an 8080, processing time is  ~ 12 lines source/sec.



CC2:	This is the second half of the compiler. CC2 accepts
	a ".CCI" file as input, and writes out a ".CRL" file
	if no errors are detected. (CRL is mnemonic for
	'C ReLocatable')

	If all goes well, writing out of the CRL file is
	followed by deletion of the "CCI" file, and 
	compilation is complete.

	As for CC1, if a disk is specified explicitly as in
		A>cc2 c:yahoo
	then the .CCI file is loaded from the specified disk
	and the .CRL file is written to that same disk.

	On an 8080, execution time =  ~ 35 lines/sec.


CLINK:	This program links a "main" function from some
	CRL file together with C.CCC (for common system
	subroutines) and any subordinate functions which
	"main" may require (from perhaps many CRL files).

	A successful linkage causes a ".COM" file to be
	generated. At this point, the 8080 absolute
	machine code file is ready to be executed (for
	better or worse) as a trancient command by CP/M.

	The first argument on the command line must be the
	name of a CRL file containing a "main" function. If
	the name is specified with an extension, then that
	extension is interpreted specially as indicating
	which disks are to be involved in the operation (this
	is akin to the mechanism ASM uses to determine source
	and destination disks.)
	For example, if the first argument to CLINK were
	given as:
		A>clink foo.bc
	then CLINK would interpret the "b" in ".bc" as 
	specifying the disk on which "DEFF.CRL" and "C.CCC" are
	to be found, and the "c" in ".bc" as specifying which
	disk the .COM file is to be written to. Both of these
	values, if omitted, default to the currently logged in
	disk.
	The first argument may also be preceded by a disk
	designation, to specify where all .CRL files are to be
	searched for (by default). For example, the command
		A>clink b:zot.ac
	tells CLINK to get C.CCC and DEFF.CRL from disk A; to
	write the ouput file to disk C; and to find ZOT.CRL on
	disk B.

	Any other CRL files to search may also be specified
	on the command line (WITHOUT their .CRL suffixes),
	causing those to be searched in the order specified.
	The default disk to search will be the same disk from
	which the original CRL file was taken; this default
	can be overridden by specifying an explicit disk
	designation for any appropriate CRL file name needing
	it. For example,
		A>clink c:foo.bb bar a:zot fraz
	causes disk C to be searched for the files FOO.CRL,
	BAR.CRL and FRAZ.CRL, while disk A would be searched
	to find ZOT.CRL. Disk B is where CLINK would expect
	DEFF.CRL and C.CCC to reside, and the output would go
	to disk B also.

	When all given CRL files have been searched, CLINK
	will automatically search DEFF.CRL.

	If there are still some unresolved references, then
	CLINK will ask for input from the keyboard to try
	resolving them.

	There are also several options which may be
	specified on the command line. Each option must
	be preceded by a dash (-); the space between
	options and their argument (if needed) is optional.
	The presently supported options are:

	-s		Prints out load statistics;
	-t nnnn		Reserves location nnnn (hex) and
			above for user; default is to 
			reserve no space. What this really
			does is to cause the first op in
			the object file to be
				lxi sp,nnnn
			instead of
				lxi sp,bdos.
	-o name		Causes the .COM file generated to
			have the given name. Default is 
			the name of the first .CRL file
			given (the one with the "main"
			function.)
	


	Examples:
		A>clink foo bar
	gets "main" from the file FOO.CRL, searches for
	needed functions first in FOO.CRL and then, if needed,
	in BAR.CRL and DEFF.CRL. All files are assumed to 
	reside on the currently logged in disk.

		A>clink b:ihtfp belle -s
	searches for IHTFP.CRL and BELLE.CRL on disk B; prints
	a statistics summary when linkage is complete. The 
	files DEFF.CRL and C.CCC are assumed to reside on the
	currently logged in disk; output also goes to the
	currently logged in disk.

		A>clink b:ihtfp.aa -s belle -o zot
	is the same as the last example except: the output
	file is called ZOT.COM, DEFF.CRL and C.CCC are assumed
	to reside on A, and output goes to A.

		A>clink stoned -t7000 -s
	sets top of memory to 7000h and prints out load
	statistics. Current disk used for everything.

	Note that if the load statistics tell you that
	the "LAST ADDRESS" is greater than the "TOP OF
	MEMORY", the program hasn't got the chance of a
	snowball in hell of running correctly.

CLIB:	This program maintains .CRL files, allows transfer
	of functions from one CRL file to another, etc. To
	invoke CLIB, just type 
			A>clib
	Clib will print a line such as
		FUNCTION BUFFER SIZE = nnnnn
	specifying the largest function size that can be
	handled. Attempting to "transfer" or "extract" a 
	function larger than this size could be destructive.

	Next CLIB will prompt with a "*". Typing "h" at 
	this point will give you a command summary.

	Basically, you work CLIB by opening one to six
	CRL files (which then become associated with	
	"file numbers"), diddling the files to your hearts
	content, closing all files which you altered, and
	typing control-C.

	The old version of any CRL file you change with CLIB
	is renamed to name.BRL (for Backup ReLative).

	A sample session of CLIB to, say, transfer the 
	functions named "FOO", "BAR", and "ZOT" from
	a .CRL file named "DSSR" to one named "RTS" would
	go as follows:

	A>clib

	BD SOFTWARE C LIBRARIAN VERSION x.x
	FUNCTION BUFFER SIZE = xxxx BYTES

	* open 0 dssr
	* open 1 rts
	* t 0 1 foo
	* t 0 1 bar
	* t 0 1 zot
	* c 1
	* ^C

	A> ...

	The "open" commands prepare to do work on a .CRL file,
	and associate each .CRL file opened with a digit (0-5).
	The "transfer" commands tell CLIB to transfer the
	named function from the first file (named by file #)
	to the second file (also named by number).
	The "close" command need only be given for files
	which have been altered; since DSSR wasn't written
	to in the above example, it didn't need to be closed,
	but RTS did need to be closed.

DEFF.CRL:  This file contains the standard function library...
	   all 58+ functions worth. See the BDS C User's Guide
	   for documentation on these functions.



C.CCC:	The run-time skeleton file, containing code for
	processing the command line (generating argc and
	argv, for you UNIX lovers), room for file I/O
	buffers, some math subroutines, etc.


	OTHER THINGS YOU GET WITH THE PACKAGE:

	Sample source files:
	OTHELLO.C	A game playing program
	LIST.C		A program to list out any ascii file
			on the CP/M list device, waiting
			between pages and putting in margins.
			Not very sophisticated, but shows how
			to use simple file I/O.
	STDLIB.C	Source for all DEFF.CRL functions 
			which were written in C.
	LINES.C		A visual freak-out for use with
			Processor Tech's VDM-1 board.
			(Not included with versions x.xT)
	DIVINE.C	Simple recursion example.
	STONE.C		Better recursion example!
	PRESSUP.C	Best recursion example!!!
	TELNET.C	Program to let a system be used
			as a terminal, optionally routing
			stuff from the modem onto disk during
			operation as a modem.
	LIFE.C		Yet another game program.
	CONVERT.C	Converts unprintable characters (for systems
			having upper case only) into special sequences
			beginning with the character "#". See also CC0T.C.
	CC0T.C		Converts C source files containing special sequences
			using "#" back into regular form, so that they can
			be compiled.

	Other stuff:
	C.DOC		You seem to have found this one.


	Note on the BDS C compiler:

	THIS IS NOT AN INTERPRETER.

	Some hacks, such as BASIC-E, are billed as compilers
	but actually just do some preprocessing and then
	interpret the program. BD C is a true compiler,
	generating not-too-optimal but nevertheless quick
	8080 code.

	For the gory details on the BD C implementation, see
	my notes to APPENDIX A of the EXCELLANT book  
		"The C Programming Language."

	Variable types supported:
	int 	char	unsigned	struct	union
	arrays (of one or two dimensions)
	pointers
	simple combinations of the above

	For example,
			char *foo[10][15];
	declares foo to be a two dimensional array of
	pointers to characters;

			char (*foo)();
	declares foo to be a pointer to a function returning
	a character;

			char *foo, bar, zot[10];
	declares foo to be a pointer to characters, bar to
	be a single char variable, ant zot to be an array
	of 10 characters.

	If your keyboard doesn't support the '{' and '}'
	characters (open and close brace, for those of
	you whose printer doesn't know about ascii 7B and
	7D), the symbols 'begin' and 'end' may be 
	substituted. Don't unless you have to; '{' and '}'
	take up less memory.
	The CONVERT program will perform this conversion,
	if necessary.

	Since all functions in C may be used recursively, all
	variable accessing is done relative to a base-of-
	stack-frame pointer, kept in the BC register pair
	during execution. Note that it takes 8 bytes of code
	to transfer a simple local variable whose address is
		(Base of stack pointer) + foo
	to the HL register pair; The code appears as:

		lxi h,foo
		dad b
		mov a,m
		inx h
		mov h,m
		mov m,a .
	To get an array element or structure element is even
	more hairy. Facts like this are enough to make me 
	REALLY wish Intel had bothered to implement a double
	byte indirect load instruction. Oh well.

	Test Run
	==== ===

	To see if everything  is OK, try compiling the
	sample program STONE.C. The sequence should look
	like this:

	A>cc1 stone.c
	BD SOFTWARE C COMPILER V1.0  (PART I)

	A>cc2 stone
	BD SOFTWARE C COMPILER V1.0 (PART II)

	A>clink stone
	BD SOFTWARE C LINKER V1.0

	A>stone
	Difficulty (1-50): 

	<and so on as STONE.COM executes...>



	Good luck. You're about to embark on an exciting
	voyage into the land of straightforward structured 
	programming: "C". Enjoy.

			---

	Now for all you UPPER-CASE-ONLY people:

	The C compiler itself doesn't know the difference between
	a printable and a non-printable character (as far as your upper-
	case-only terminal is concerned.) In order for a source file to
	compile properly, characters such as "left bracket" must appear
	as their ASCII value indicates. Since your terminal cannot print
	these special characters (there are about 9 of them that C uses),
	when you type out a source file (say, LIFE.C), you'll see all kinds of
	strange symbols instead of the characters that are really there.

	Thus, the two programs CONVERT.C and CC0T.C have been provided to
	translate back and forth between an intermediate form of source code
	in which all of these unprintable characters are represented in
	terms of printable characters; i.e., the character "#" (which has
	no special meaning to the BDS C compiler unless it is part of the
	string "#define") followed by one of the special characters 
		B, L, R, C, V, U, or H.
	The meaning of each of these is covered in the comments within the
	file CONVERT.C.

	So... the CONVERT program takes source files in the natural form
	and converts them to "#" notation (lets call it ".CT" format.)
	The form of the CONVERT command is:
		A>convert foo.c bar.ct
	where foo.c is the existing file, and bar.ct is the new file created.
	You may then edit the .ct file, using the "#" convention to represent
	all those unprintable characters.
	When you're ready to compile the file, the CC0T program must be
	run first to convert the .CT format back into the natural format.
	To reverse the example above, the command would be:
		A>cc0t bar.ct zot.c
	leaving zot.c as the file ready for compilation by BDS C.

	If you don't have an upper-case-only terminal, you'll never need
	to bother with CONVERT.C or CC0T.C. Otherwise...I suggest you
	upgrade as soon as possible to a full ASCII terminal, so you won't
	have to bother with CONVERT.C and CC0T.C !!!!!!
